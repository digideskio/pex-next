// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Client, Config, ConnectionStatus, FEEDBACK, GAME, GENERATING, GameInfo, Gene, GenesPanel, GeometryRecorder, KnobsPanel, PlantType, PlantsPanel, Platform, RESULTS, RESULTS_WINNER, Rect, SIMULATION_1, SIMULATION_2, SIMULATION_3, TextLabel, Texture2D, Time, Utils, Vec3, Window, pex, plantsClasses, storage, _ref, _ref1, _ref2, _ref3;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.geom, Rect = _ref1.Rect, Vec3 = _ref1.Vec3;
  _ref2 = require('flora/game'), PlantType = _ref2.PlantType, Config = _ref2.Config;
  Time = require('pex/utils').Time;
  _ref3 = require('flora/game/ui'), GenesPanel = _ref3.GenesPanel, KnobsPanel = _ref3.KnobsPanel, PlantsPanel = _ref3.PlantsPanel, ConnectionStatus = _ref3.ConnectionStatus, TextLabel = _ref3.TextLabel, GameInfo = _ref3.GameInfo;
  Texture2D = require('pex/gl').Texture2D;
  plantsClasses = require('flora/plants');
  storage = require('utils/Storage');
  Utils = require('utils/Utils');
  Client = require('flora/game/Client');
  Gene = require('flora/plants/Gene');
  GeometryRecorder = require('utils/GeometryRecorder');
  GENERATING = 'generating';
  GAME = 'game';
  SIMULATION_1 = 'simulation_round1';
  SIMULATION_2 = 'simulation_round2';
  SIMULATION_3 = 'simulation_round3';
  RESULTS = 'results';
  RESULTS_WINNER = 'results_winner';
  FEEDBACK = 'feedback';
  return Window.create({
    settings: {
      fullscreen: Platform.isEjecta,
      width: 1536 / 2.5,
      height: 2048 / 2.5
    },
    init: function() {
      this.needSave = false;
      this.selectedPlantType = storage.getItem('selectedPlant');
      return this.initUI();
    },
    initUI: function() {
      var gene, geneName, plant, plantInfo, plantType, _ref4, _ref5,
        _this = this;

      this.plants = [];
      this.client = new Client();
      this.client.init();
      this.connectionStatus = new ConnectionStatus(this);
      this.connectionStatus.onTrippleClick = function() {
        _this.selectedPlantType = null;
        _this.plantsPanel.enabled = true;
        return _this.plantsPanel.closing = false;
      };
      this.gameInfo = new GameInfo(this);
      this.timeLabel = new TextLabel(this, new Vec3(this.width / 2, this.width / 7, 0), "00:30", this.width / 20, 0.6);
      this.genesPanel = new GenesPanel(this);
      this.genesPanel.enabled = false;
      this.knobsPanel = new KnobsPanel(this);
      this.knobsPanel.enabled = false;
      this.knobsPanel.onChange = this.onKnobChange.bind(this);
      _ref4 = Config.plants;
      for (plantType in _ref4) {
        plantInfo = _ref4[plantType];
        plant = new plantsClasses[plantInfo.className](this);
        plant.type = plantType;
        plant.iconTexture = Texture2D.load(plantInfo.icon);
        plant.iconBgTexture = Texture2D.load(plantInfo.iconBg);
        _ref5 = plant.genes;
        for (geneName in _ref5) {
          gene = _ref5[geneName];
          if (plantInfo.genes[geneName]) {
            gene.iconTexture = Texture2D.load(plantInfo.genes[geneName]);
            gene.enabled = true;
          } else {
            gene.enabled = false;
          }
        }
        this.plants.push(plant);
      }
      this.plantsPanel = new PlantsPanel(this);
      this.plantsPanel.onChange = this.onPlantsPanelChange.bind(this);
      if (this.selectedPlantType) {
        this.plantsPanel.enabled = false;
        this.setSelectedPlantType(this.selectedPlantType);
      }
      this.on('leftMouseDown', this.onMouseDown.bind(this));
      this.on('keyDown', function(e) {
        if (e.str === 'S') {
          return this.needSave = true;
        }
      });
      return this.geometryRecorder = new GeometryRecorder('models');
    },
    reset: function() {
      var availableGenes, gene, geneName, selectedPlant, _ref4;

      selectedPlant = this.getSelectedPlant();
      if (!selectedPlant) {
        return;
      }
      availableGenes = [];
      _ref4 = selectedPlant.genes;
      for (geneName in _ref4) {
        gene = _ref4[geneName];
        if (gene.enabled) {
          availableGenes.push(gene);
        }
      }
      selectedPlant.activeGenes = availableGenes.slice(0, 3);
      this.genesPanel.enabled = true;
      this.knobsPanel.enabled = true;
      return this.knobsPanel.reinitialize();
    },
    getSelectedPlant: function() {
      var plant, _i, _len, _ref4;

      _ref4 = this.plants;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        plant = _ref4[_i];
        if (plant.type === this.selectedPlantType) {
          return plant;
        }
      }
      return null;
    },
    setSelectedPlantType: function(plantType) {
      console.log('FloraGame.setSelectedPlantType', plantType);
      this.selectedPlantType = plantType;
      storage.setItem('selectedPlant', plantType);
      return this.reset();
    },
    onPlantsPanelChange: function(plantType) {
      console.log('FloraGame.onPlantsPanelChange', plantType);
      return this.setSelectedPlantType(plantType);
    },
    onKnobChange: function(index, value) {
      var gene, plant, plantGene;

      plant = this.getSelectedPlant();
      if (!plant) {
        return;
      }
      gene = plant.activeGenes[index];
      if (!gene) {
        console.log('FloraGame.onKnobChange', index, 'no active gene with that index');
        return;
      }
      plantGene = plant.genes[gene.name];
      if (!plantGene) {
        console.log('FloraGame.onKnobChange', gene.name, 'plant doesn\'t have that gene');
        return;
      }
      return plantGene.normalizedValue = value;
    },
    onMouseDown: function() {
      if (this.selectedPlantType) {
        return this.client.sendPing(this.selectedPlantType);
      }
    },
    update: function() {
      var gene, geneName, genotype, plant, _ref4;

      if (Time.frameNumber % 30 === 0) {
        genotype = {};
        plant = this.getSelectedPlant();
        _ref4 = plant.genes;
        for (geneName in _ref4) {
          gene = _ref4[geneName];
          genotype[geneName] = gene.normalizedValue;
        }
        return this.client.sendGenotype(this.selectedPlantType, genotype);
      }
    },
    draw: function() {
      var e;

      try {
        this.gl.clearColor(0, 0, 0, 1);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        this.gl.disable(this.gl.DEPTH_TEST);
        if (this.plantsPanel.enabled) {
          this.plantsPanel.draw();
        } else {
          this.update();
          if (this.needSave) {
            this.geometryRecorder.start();
          }
          this.getSelectedPlant().draw();
          if (this.needSave) {
            this.needSave = false;
            this.geometryRecorder.stop();
          }
          this.knobsPanel.draw();
          this.genesPanel.draw();
          this.gameInfo.draw();
        }
        this.connectionStatus.draw();
        if (this.client.mode === GAME) {
          this.timeLabel.setTime(0, this.client.duration - this.client.time);
        } else {
          this.timeLabel.setText('   ');
        }
        return this.timeLabel.draw();
      } catch (_error) {
        e = _error;
        if (!this.errors) {
          this.errors = {};
        }
        if (this.errors[e]) {
          return;
        }
        this.errors[e] = e;
        return console.log(e.stack);
      }
    }
  });
});

/*
//@ sourceMappingURL=FloraGame.map
*/
