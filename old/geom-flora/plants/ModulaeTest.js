// Generated by CoffeeScript 1.6.2
define(function(require) {
  var AllFacesSelector, Arcball, BoundingBox, Color, Cube, Diffuse, ExtrudeSegment, Geometry, HEDuplicate, Icosahedron, MathUtils, Mesh, Modulae, MovieRecorder, Octahedron, PI, PerspectiveCamera, Platform, RenderTarget, Scene, ScreenImage, ShowDepth, ShowNormals, SingleFaceSelector, SolidColor, Sphere, Split2, Texture2D, Time, Vec3, Viewport, Window, cos, floor, hem, pex, random, randomElement, sin, sqrt, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Arcball = _ref1.Arcball, Scene = _ref1.Scene;
  _ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth, ShowNormals = _ref2.ShowNormals;
  _ref3 = pex.gl, Mesh = _ref3.Mesh, Texture2D = _ref3.Texture2D, RenderTarget = _ref3.RenderTarget, Viewport = _ref3.Viewport, ScreenImage = _ref3.ScreenImage, RenderTarget = _ref3.RenderTarget;
  _ref4 = pex.geom, hem = _ref4.hem, Vec3 = _ref4.Vec3, BoundingBox = _ref4.BoundingBox, Geometry = _ref4.Geometry;
  _ref5 = pex.geom.gen, Cube = _ref5.Cube, Octahedron = _ref5.Octahedron, Sphere = _ref5.Sphere, Icosahedron = _ref5.Icosahedron;
  Color = pex.color.Color;
  _ref6 = pex.utils, Time = _ref6.Time, MathUtils = _ref6.MathUtils, MovieRecorder = _ref6.MovieRecorder;
  cos = Math.cos, sin = Math.sin, PI = Math.PI, sqrt = Math.sqrt, random = Math.random, floor = Math.floor;
  randomElement = MathUtils.randomElement;
  _ref7 = require('flora/plants/modular'), Modulae = _ref7.Modulae, SingleFaceSelector = _ref7.SingleFaceSelector, ExtrudeSegment = _ref7.ExtrudeSegment, Split2 = _ref7.Split2, AllFacesSelector = _ref7.AllFacesSelector;
  HEDuplicate = require('geom/hem/HEDuplicate');
  return Window.create({
    settings: {
      fullscreen: Platform.isBrowser
    },
    init: function() {
      this.step = 0;
      this.initUI();
      this.initGeometry();
      this.initScene();
      this.initCameras();
      this.animate = true;
      return this.subdivide = true;
    },
    initUI: function() {
      var _this = this;

      this.rt = new RenderTarget(1024 * 2, 1024, {
        depth: true
      });
      this.screenImage = new ScreenImage(this.rt.getColorAttachement(0), 0, 0, this.width, this.height, this.width, this.height);
      this.on('mouseDragged', function(e) {
        return _this.step = 0;
      });
      return this.on('keyDown', function(e) {
        if (e.str === 'a') {
          _this.animate = !_this.animate;
        }
        if (e.str === '\t') {
          _this.subdivide = !_this.subdivide;
        }
        if (e.str === 'r') {
          if (_this.movieRecorder.recording) {
            return _this.movieRecorder.stop();
          } else {
            return _this.movieRecorder.start();
          }
        }
      });
    },
    initGeometry: function() {
      var branchRadius, extrusionSpeed;

      console.log('initGeometry');
      if (this.object === 1) {
        this.object = 2;
      } else {
        this.object = 1;
      }
      extrusionSpeed = 0.5;
      branchRadius = 0.2;
      if (this.object === 1) {
        this.mod = new Modulae(new Cube(0.15, 0.15, 0.15, 1, 1, 1));
        this.mod.add(new SingleFaceSelector(new Vec3(0, 1, 0)));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius * 0.5, branchRadius * 0.5, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius * 0.5, branchRadius * 1.5, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius * 1.5, branchRadius * 1.5, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius * 1.5, branchRadius * 2.5, extrusionSpeed));
        this.mod.add(new Split2(0.2, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.5, branchRadius * 0.5, branchRadius * 0.5, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.5, branchRadius * 0.5, branchRadius * 0.5, extrusionSpeed));
        this.mod.add(new Split2(0.2, extrusionSpeed));
        this.mod.add(new Split2(0.2, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.5, branchRadius * 0.5, branchRadius * 0.15, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.5, branchRadius * 0.5, branchRadius * 0.15, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.5, branchRadius * 0.5, branchRadius * 0.15, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.5, branchRadius * 0.5, branchRadius * 0.15, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(-0.15, branchRadius * 0.75, branchRadius * 0.05, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(-0.15, branchRadius * 0.75, branchRadius * 0.05, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(-0.15, branchRadius * 0.75, branchRadius * 0.05, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(-0.15, branchRadius * 0.75, branchRadius * 0.05, extrusionSpeed));
        /*
        @mod.add(new Split2())
        @mod.add(new Split2())
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new Split2())
        @mod.add(new Split2())
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new Split2())
        @mod.add(new Split2())
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new Split2())
        @mod.add(new Split2())
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        @mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed))
        */

      }
      if (this.object === 2) {
        this.mod = new Modulae(new Octahedron(0.15, 0.15, 0.15, 1, 1, 1));
        this.mod.add(new AllFacesSelector());
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.4, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.2, branchRadius, extrusionSpeed));
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new Split2());
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
        return this.mod.add(new ExtrudeSegment(0.3, branchRadius, extrusionSpeed));
      }
    },
    initScene: function() {
      this.mesh = new Mesh(this.mod.hem.toFlatGeometry(), new SolidColor({
        color: new Color(0, 0, 0, 0)
      }));
      this.wireframe = new Mesh(this.mod.hem.toEdgesGeometry(), new SolidColor({
        color: Color.White
      }), {
        useEdges: true
      });
      this.selection = new Mesh(this.mod.getSelectionGeometry(), new SolidColor({
        color: Color.Yellow,
        pointSize: 10
      }), {
        primitiveType: this.gl.POINTS
      });
      this.cellCores = new Mesh(new Geometry({
        vertices: this.mod.hem.faces.map(function(f) {
          return f.edge.vert.position;
        })
      }), new SolidColor({
        color: new Color(0, 1, 1, 1),
        pointSize: 4
      }), {
        primitiveType: this.gl.POINTS
      });
      this.hightlightsMesh = new Mesh(this.mod.hem.toFlatGeometry(), new SolidColor({
        color: new Color(0.2, 0.7, 0.0, 1.0)
      }));
      this.scene = new Scene();
      this.scene.add(this.selection);
      this.scene.add(this.mesh);
      this.scene.add(this.wireframe);
      return this.scene.add(this.cellCores);
    },
    initCameras: function() {
      this.camera = new PerspectiveCamera(60, this.width / this.height);
      this.arcball = new Arcball(this, this.camera, 2);
      return this.movieRecorder = new MovieRecorder('frames');
    },
    draw: function() {
      var bbox, drawable, smooth, _i, _len, _ref8;

      this.movieRecorder.update();
      this.gl.clearColor(0, 0, 0, 1);
      this.gl.lineWidth(2);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.gl.enable(this.gl.DEPTH_TEST);
      if (this.animate) {
        this.mod.update();
        smooth = this.mod.hem.dup();
        if (this.subdivide) {
          smooth.subdivide();
        }
        this.mesh.geometry = smooth.toFlatGeometry();
        this.hightlightsMesh.geometry = smooth.toFlatGeometry();
        this.hightlightsMesh.geometry.faces = this.hightlightsMesh.geometry.faces.filter(function(f, fi) {
          return fi % 9 === 0;
        });
        this.wireframe.geometry = smooth.toEdgesGeometry(0.005, 0.001);
        this.selection.geometry = this.mod.getSelectionGeometry();
        this.cellCores.geometry = new Geometry({
          vertices: smooth.faces.map(function(f) {
            return f.getCenter();
          })
        });
        this.selection.enabled = this.selection.geometry.vertices.length > 0;
        bbox = BoundingBox.fromPoints(this.mesh.geometry.vertices);
        this.hightlightsMesh.position.y = this.mesh.position.y = this.selection.position.y = this.wireframe.position.y = this.cellCores.position.y = -bbox.getCenter().y;
      }
      _ref8 = this.scene.drawables;
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        drawable = _ref8[_i];
        this.hightlightsMesh.rotation.setAxisAngle(new Vec3(0, 1, 0), Time.seconds * 30);
        drawable.rotation.setAxisAngle(new Vec3(0, 1, 0), Time.seconds * 30);
      }
      this.scene.draw(this.camera);
      this.gl.clear(this.gl.DEPTH_BUFFER_BIT);
      this.gl.enable(this.gl.CULL_FACE);
      return this.movieRecorder.capture();
    }
  });
});

/*
//@ sourceMappingURL=ModulaeTest.map
*/
