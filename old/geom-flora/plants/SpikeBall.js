// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Arcball, Color, Cube, Diffuse, Dodecahedron, Geometry, Icosahedron, MathUtils, Mesh, MovieRecorder, ObjReader, Octahedron, PI, PerspectiveCamera, Platform, RenderTarget, Scene, ScreenImage, ShowDepth, ShowNormals, SolidColor, Sphere, Texture2D, Time, Vec3, Viewport, Window, abs, blue, cos, green, hem, orange, pex, pink, random, sin, skyblue, sqrt, yellow, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Arcball = _ref1.Arcball, Scene = _ref1.Scene;
  _ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth, ShowNormals = _ref2.ShowNormals;
  _ref3 = pex.gl, Mesh = _ref3.Mesh, Texture2D = _ref3.Texture2D, RenderTarget = _ref3.RenderTarget, Viewport = _ref3.Viewport, ScreenImage = _ref3.ScreenImage;
  _ref4 = pex.geom, hem = _ref4.hem, Vec3 = _ref4.Vec3, Geometry = _ref4.Geometry;
  _ref5 = pex.geom.gen, Cube = _ref5.Cube, Octahedron = _ref5.Octahedron, Sphere = _ref5.Sphere, Dodecahedron = _ref5.Dodecahedron, Icosahedron = _ref5.Icosahedron;
  Color = pex.color.Color;
  _ref6 = pex.utils, Time = _ref6.Time, MathUtils = _ref6.MathUtils, MovieRecorder = _ref6.MovieRecorder, ObjReader = _ref6.ObjReader;
  cos = Math.cos, sin = Math.sin, PI = Math.PI, sqrt = Math.sqrt, abs = Math.abs, random = Math.random;
  orange = new Color(243 / 255, 134 / 255, 48 / 255, 1);
  blue = new Color(54 / 255, 149 / 255, 191 / 255, 1);
  pink = new Color(233 / 255, 78 / 255, 119 / 255, 1);
  green = new Color(182 / 255, 206 / 255, 81 / 255, 1);
  yellow = new Color(247 / 255, 215 / 255, 114 / 255, 1);
  skyblue = new Color(84 / 255, 202 / 255, 221 / 255, 1);
  return pex.require(['geom/gen/Cylinder', 'lib/PerlinNoise'], function(Cylinder, PerlinNoise) {
    return Window.create({
      settings: {
        fullscreen: Platform.isBrowser
      },
      init: function() {
        this.step = 0;
        this.initUI();
        this.initScene();
        this.initGeometry();
        return this.initCameras();
      },
      initUI: function() {
        var _this = this;

        this.on('mouseDragged', function(e) {
          return _this.step = 0;
        });
        return this.on('keyDown', function(e) {
          if (e.str === 'r') {
            if (_this.movieRecorder.recording) {
              return _this.movieRecorder.stop();
            } else {
              return _this.movieRecorder.start();
            }
          }
        });
      },
      initScene: function() {
        return this.scene = new Scene();
      },
      initGeometry: function() {
        var _this = this;

        this.cactusMaterial = new ShowNormals();
        return ObjReader.load('models/flower.obj', function(geom) {
          var cylinderR;

          geom.vertices.forEach(function(v) {
            return v.scale(0.25);
          });
          cylinderR = 0.05;
          _this.cactusGeom = new Geometry({
            vertices: true,
            edges: true
          });
          geom.vertices.forEach(function(v) {
            return _this.cactusGeom.vertices.push(v.dup().scale(1.0001));
          });
          geom.faces.forEach(function(f) {
            return _this.cactusGeom.faces.push(f);
          });
          _this.cactusGeom2 = new Sphere(0.5);
          _this.cactusGeom2.computeEdges();
          _this.cactusGeom2.computeSmoothNormals();
          _this.cactusGeom2.vertices.forEach(function(v) {
            return v.original = v.dup();
          });
          _this.cactusGeom.faces = _this.cactusGeom.faces.filter(function(f, fi) {
            return fi % 27 === 0;
          });
          _this.cactusGeom2.faces = _this.cactusGeom2.faces.filter(function(f, fi) {
            return (fi + 10) % 27 === 0;
          });
          _this.cactusWireGeom = geom;
          _this.cactusWireGeom.computeEdges();
          _this.cactusWireGeom.computeSmoothNormals();
          _this.cactusWireHighlightsGeom = new Geometry({
            vertices: true,
            edges: true
          });
          geom.vertices.forEach(function(v) {
            return _this.cactusWireHighlightsGeom.vertices.push(v.dup().scale(1.0001));
          });
          geom.edges.forEach(function(e) {
            return _this.cactusWireHighlightsGeom.edges.push(e);
          });
          _this.cactusWireHighlightsGeom.edges = _this.cactusWireHighlightsGeom.edges.filter(function(e, ei) {
            return ei % 15 === 0;
          });
          _this.cactusMesh = new Mesh(_this.cactusGeom, new SolidColor({
            color: pink,
            color2: new Color(0.2, 0.6, 0.7, 1.0)
          }));
          _this.cactusMesh2 = new Mesh(_this.cactusGeom2, new SolidColor({
            color: green,
            color2: new Color(0.2, 0.8, 0.7, 1.0)
          }));
          _this.cactusWireframe = new Mesh(_this.cactusWireGeom, new SolidColor({
            color: blue,
            color2: new Color(0.2, 0.3, 0.5, 1.0)
          }), {
            useEdges: true
          });
          _this.cactusWireframeFill = new Mesh(_this.cactusWireGeom, new SolidColor({
            color: new Color(0, 0, 0, 0.95),
            color2: new Color(0.7, 0.3, 0.5, 1.0)
          }));
          _this.cactusWireframeHighlights = new Mesh(_this.cactusWireHighlightsGeom, new SolidColor({
            color2: new Color(0.7, 0.3, 0.5, 1.0)
          }), {
            useEdges: true
          });
          _this.cactusWireframePoints = new Mesh(_this.cactusWireHighlightsGeom, new SolidColor({
            pointSize: 3,
            color2: new Color(0.7, 0.7, 0.5, 1.0)
          }), {
            primitiveType: _this.gl.POINTS
          });
          _this.scene.add(_this.cactusMesh);
          _this.scene.add(_this.cactusMesh2);
          _this.scene.add(_this.cactusWireframeFill);
          return _this.scene.add(_this.cactusWireframe);
        });
      },
      initCameras: function() {
        this.camera = new PerspectiveCamera(60, this.width / this.height);
        this.arcball = new Arcball(this, this.camera, 1.5);
        return this.movieRecorder = new MovieRecorder('frames');
      },
      draw: function() {
        var R;

        this.movieRecorder.update();
        R = 0.052;
        /*
        @cactusGeom.vertices.forEach (v, vi) =>
          r = R
          v.x = v.original.x + r * @cactusGeom.normals[vi].x * sin(v.original.x*20 + v.original.y*20 + Time.seconds)
          v.y = v.original.y + r * @cactusGeom.normals[vi].y * sin(v.original.z*20 + v.original.y*20 + Time.seconds)
          v.z = v.original.z + r * @cactusGeom.normals[vi].z * cos(v.original.z*20 + v.original.z*20 + Time.seconds)
          #r = MathUtils.map(v.original.y, -0.5, 0.5, -0.5, 0.2)
          #v.x += v.original.x + r * @cactusGeom.normals[vi].x
          #v.y += v.original.y + r * @cactusGeom.normals[vi].y
          #v.z += v.original.z + r * @cactusGeom.normals[vi].z
        
        @cactusGeom2.vertices.forEach (v, vi) =>
          r = R
          v.x = v.original.x + r * @cactusGeom2.normals[vi].x * sin(v.original.x*20 + v.original.y*20 + Time.seconds)
          v.y = v.original.y + r * @cactusGeom2.normals[vi].y * sin(v.original.z*20 + v.original.y*20 + Time.seconds)
          v.z = v.original.z + r * @cactusGeom2.normals[vi].z * cos(v.original.z*20 + v.original.z*20 + Time.seconds)
          #r = MathUtils.map(v.original.y, -0.5, 0.5, -0.5, 0.2)
        
        @cactusWireGeom.vertices.forEach (v, vi) =>
          r = R
          #r += MathUtils.map(v.original.y, -0.5, 0.5, 1, 1)
          v.x = v.original.x + r * @cactusWireGeom.normals[vi].x * sin(v.original.x*20 + v.original.y*20 + Time.seconds)
          v.y = v.original.y + r * @cactusWireGeom.normals[vi].y * sin(v.original.z*20 + v.original.y*20 + Time.seconds)
          v.z = v.original.z + r * @cactusWireGeom.normals[vi].z * cos(v.original.z*20 + v.original.z*20 + Time.seconds)
          #r = MathUtils.map(v.original.y, -0.5, 0.5, -0.5, 0.2)
          #v.x += v.original.x + r * @cactusGeom.normals[vi].x
          #v.y += v.original.y + r * @cactusGeom.normals[vi].y
          #v.z += v.original.z + r * @cactusGeom.normals[vi].z
        
        @cactusWireHighlightsGeom.vertices.forEach (v, vi) =>
          r = R
          #r += MathUtils.map(v.original.y, -0.5, 0.5, 1, 1)
          v.x = v.original.x + r * @cactusWireGeom.normals[vi].x * sin(v.original.x*20 + v.original.y*20 + Time.seconds)
          v.y = v.original.y + r * @cactusWireGeom.normals[vi].y * sin(v.original.z*20 + v.original.y*20 + Time.seconds)
          v.z = v.original.z + r * @cactusWireGeom.normals[vi].z * cos(v.original.z*20 + v.original.z*20 + Time.seconds)
        
        @cactusGeom.vertices.dirty = true
        @cactusGeom2.vertices.dirty = true
        @cactusWireGeom.vertices.dirty = true
        @cactusWireHighlightsGeom.vertices.dirty = true
        */

        this.gl.enable(this.gl.CULL_FACE);
        this.gl.clearColor(0, 0, 0, 1);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        this.gl.enable(this.gl.DEPTH_TEST);
        this.gl.lineWidth(2);
        if (!this.cactusMesh) {
          return;
        }
        this.cactusMesh.draw(this.camera);
        this.cactusWireframe.draw(this.camera);
        this.cactusWireframeHighlights.draw(this.camera);
        this.gl.enable(this.gl.DEPTH_TEST);
        this.cactusWireframePoints.draw(this.camera);
        this.gl.enable(this.gl.BLEND);
        this.gl.blendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
        this.gl.depthMask(0);
        this.cactusWireframeFill.draw(this.camera);
        this.gl.depthMask(1);
        this.gl.disable(this.gl.BLEND);
        return this.movieRecorder.capture();
      }
    });
  });
});

/*
//@ sourceMappingURL=SpikeBall.map
*/
