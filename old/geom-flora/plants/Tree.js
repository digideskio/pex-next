// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Arcball, Color, Cube, Diffuse, Dodecahedron, Edge, GUI, Geometry, Icosahedron, LineBuilder, Mat4, MathUtils, Mesh, Octahedron, PI, PerspectiveCamera, Platform, RenderTarget, Scene, ScreenImage, ShowDepth, ShowNormals, SolidColor, Sphere, Spline3D, Texture2D, Time, Vec3, Viewport, Window, abs, cos, exp, floor, hem, log, map, max, min, pex, random, sin, sqrt, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Arcball = _ref1.Arcball, Scene = _ref1.Scene;
  _ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth, ShowNormals = _ref2.ShowNormals;
  _ref3 = pex.gl, Mesh = _ref3.Mesh, Texture2D = _ref3.Texture2D, RenderTarget = _ref3.RenderTarget, Viewport = _ref3.Viewport, ScreenImage = _ref3.ScreenImage;
  _ref4 = pex.geom, hem = _ref4.hem, Vec3 = _ref4.Vec3, Geometry = _ref4.Geometry, Edge = _ref4.Edge, Mat4 = _ref4.Mat4, Spline3D = _ref4.Spline3D;
  _ref5 = pex.geom.gen, Cube = _ref5.Cube, Octahedron = _ref5.Octahedron, Sphere = _ref5.Sphere, Dodecahedron = _ref5.Dodecahedron, Icosahedron = _ref5.Icosahedron, LineBuilder = _ref5.LineBuilder;
  Color = pex.color.Color;
  _ref6 = pex.utils, Time = _ref6.Time, MathUtils = _ref6.MathUtils;
  map = MathUtils.map;
  cos = Math.cos, sin = Math.sin, PI = Math.PI, sqrt = Math.sqrt, abs = Math.abs, random = Math.random, floor = Math.floor, min = Math.min, max = Math.max, exp = Math.exp, log = Math.log;
  GUI = pex.gui.GUI;
  return pex.require(['flora/plants/lsys', 'lib/PerlinNoise'], function(lsys, Cylinder, PerlinNoise) {
    var LSystem, LSystemRenderer, Rule;

    LSystem = lsys.LSystem, LSystemRenderer = lsys.LSystemRenderer, Rule = lsys.Rule;
    console.log(lsys);
    return Window.create({
      settings: {
        fullscreen: Platform.isBrowser,
        type: '2d3d'
      },
      init: function() {
        /*
        chwast = new LSystem("F", [
          new Rule("F", "F[+F]F[-F]F")
        ])
        
        chwast2 = new LSystem("F", [
          new Rule("F", "F+F--F+F")
        ])
        
        wodorost = new LSystem("F", [
          new Rule("F", "FF-[-F+F+F]+[+F-F-F]")
        ])
        
        tree = new LSystem("X", [
          new Rule("X", "F-[[X]+X]+F[+FX]-X"),
          new Rule("F", "FF")
        ])
        
        widelkiSys = new LSystem("X", [
          new Rule("X", "F[+X][-X]FX"),
          new Rule("F", "FF")
        ])
        
        mech = new LSystem("X", [
          new Rule("X", "F[+X]F[-X]+X"),
          new Rule("F", "FF")
        ])
        
        leafs = new LSystem("X", [
          new Rule("X", "F-[[X]+X]+F[+FX]-XL"),
          new Rule("F", "FF")
        ])
        
        leafs2 = new LSystem("X", [
          new Rule("X", "F-[[LX]+X]+F[L+FX]-XL"),
          new Rule("F", "FF")
        ])
        
        leafs3 = new LSystem("X", [
          new Rule("X", "F-[[LX]+X]+F[L+FX]-XL"),
          new Rule("F", "F!F")
        ])
        
        leafs4 = new LSystem("X", [
          new Rule("X", "XX"),
          new Rule("F", "FF")
        ])
        
        newPlant = new LSystem("F", [
          new Rule("F", "FF[---L][--L][-L][+L][++L][+++L]"),
          new Rule("L", "[+F][++F][+++F]")
        ])
        
        herb1 = new LSystem("a", [
          new Rule("a", "F[+L][-L]a"),
          new Rule("a", "F[-L]A"),
          new Rule("L", "FF[+F][-F]"),
          new Rule("A", "K")
        ])
        
        herb2 = new LSystem("a", [
          new Rule("a", "F[+L][-L]a"),
          new Rule("a", "F[+L][-L]A"),
          new Rule("A", "F[+L][-L][-b][+b]a"),
          new Rule("A", "F[+L][-L][-B][+B]B"),
          new Rule("b", "F[+L][-L]b"),
          new Rule("b", "F[+L][-L]B"),
          new Rule("B", "F[K]B"),
        ])
        
        c = 0.05
        herb3 = new LSystem("a", [
          new Rule("a", "I[L]a", c),
          new Rule("a", "I[L]A", c),
          new Rule("A", "I[L][+b]-A", c),
          new Rule("A", "I[L][-b]+B", c),
          new Rule("b", "I[L]-b", c),
          new Rule("b", "I[L]+B", c),
          new Rule("B", "I[L][-c]-B", c),
          new Rule("B", "I[L][+c]+C", c),
          new Rule("c", "I[L]c", c),
          new Rule("c", "I[L]C", c),
          new Rule("C", "I[K]C", c),
          new Rule("C", "K"),
          #new Rule("L", "[-F][+F]")
          new Rule("I", "F")
        ])
        */

        var herb4,
          _this = this;

        herb4 = new LSystem([["F", 0]], [new Rule(["F", 5], [["I"], ["F"]]), new Rule(["F", 8], [["F"], ["["], ["+"], ["F"], ["]"], ["["], ["-"], ["F"], ["]"]]), new Rule(["F", 14], [["I"], ["F"]]), new Rule(["F", 15], [["F"], ["["], ["+"], ["F"], ["]"], ["["], ["-"], ["F"], ["]"]])]);
        this.lsystemRenderer = new LSystemRenderer(herb4.generate(10));
        return this.on('mouseMoved', function(e) {
          _this.lsystemRenderer.twirl = MathUtils.map(e.x, 0, _this.width, -25, 25);
          return _this.lsystemRenderer.angle = MathUtils.map(e.y, 0, _this.height, 70, 0);
        });
      },
      draw: function() {
        this.canvas.drawColor(40, 40, 40, 255);
        if (this.lsystemRenderer) {
          return this.lsystemRenderer.draw(this.canvas, this.paint);
        }
      }
    });
  });
});

/*
//@ sourceMappingURL=Tree.map
*/
