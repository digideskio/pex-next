// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Arcball, Color, Cube, Diffuse, Dodecahedron, Geometry, Icosahedron, MathUtils, Mesh, Octahedron, PI, PerspectiveCamera, Platform, RenderTarget, Scene, ScreenImage, ShowDepth, ShowNormals, SolidColor, Sphere, Texture2D, Time, Vec3, Viewport, Window, abs, cos, hem, pex, random, sin, sqrt, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Arcball = _ref1.Arcball, Scene = _ref1.Scene;
  _ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth, ShowNormals = _ref2.ShowNormals;
  _ref3 = pex.gl, Mesh = _ref3.Mesh, Texture2D = _ref3.Texture2D, RenderTarget = _ref3.RenderTarget, Viewport = _ref3.Viewport, ScreenImage = _ref3.ScreenImage;
  _ref4 = pex.geom, hem = _ref4.hem, Vec3 = _ref4.Vec3, Geometry = _ref4.Geometry;
  _ref5 = pex.geom.gen, Cube = _ref5.Cube, Octahedron = _ref5.Octahedron, Sphere = _ref5.Sphere, Dodecahedron = _ref5.Dodecahedron, Icosahedron = _ref5.Icosahedron;
  Color = pex.color.Color;
  _ref6 = pex.utils, Time = _ref6.Time, MathUtils = _ref6.MathUtils;
  cos = Math.cos, sin = Math.sin, PI = Math.PI, sqrt = Math.sqrt, abs = Math.abs, random = Math.random;
  return pex.require(['geom/gen/Cylinder', 'lib/PerlinNoise'], function(Cylinder, PerlinNoise) {
    return Window.create({
      settings: {
        fullscreen: Platform.isBrowser
      },
      init: function() {
        this.step = 0;
        this.initUI();
        this.initScene();
        this.initGeometry();
        return this.initCameras();
      },
      initUI: function() {},
      initScene: function() {
        return this.scene = new Scene();
      },
      initGeometry: function() {
        this.cellGeom = new Cube();
        this.cellGeom.computeEdges();
        this.cellGeom.computeSmoothNormals();
        this.cellGeom.vertices.forEach(function(v) {
          return v.original = v.dup();
        });
        this.cellHem = hem().fromGeometry(this.cellGeom);
        this.cellGeom = this.cellHem.toFlatGeometry();
        this.cellGeom.computeEdges();
        this.cellWireframe = new Mesh(this.cellGeom, new SolidColor({
          color: new Color(0.2, 0.3, 0.5, 1.0)
        }), {
          useEdges: true
        });
        this.cellWireframeFill = new Mesh(this.cellGeom, new SolidColor({
          color: new Color(0, 0, 0, 0.55),
          color2: new Color(0.7, 0.3, 0.5, 1.0)
        }));
        this.scene.add(this.cellWireframeFill);
        return this.scene.add(this.cellWireframe);
      },
      initCameras: function() {
        this.camera = new PerspectiveCamera(60, this.width / this.height);
        return this.arcball = new Arcball(this, this.camera, 2);
      },
      draw: function() {
        this.gl.enable(this.gl.CULL_FACE);
        this.gl.clearColor(0, 0, 0, 1);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        this.gl.enable(this.gl.DEPTH_TEST);
        this.gl.lineWidth(1);
        this.cellHem.faces;
        this.cellHem.toFlatGeometry(this.cellGeom);
        this.cellGeom.vertices.dirty = true;
        return this.scene.draw(this.camera);
      }
    });
  });
});

/*
//@ sourceMappingURL=CellGrowth.map
*/
