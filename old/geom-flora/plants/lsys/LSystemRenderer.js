// Generated by CoffeeScript 1.6.2
define(function(require) {
  var LSystemRenderer, PI, cos, min, sin;

  min = Math.min, sin = Math.sin, cos = Math.cos, PI = Math.PI;
  return LSystemRenderer = (function() {
    function LSystemRenderer(instance) {
      this.instance = instance;
      this.stack = [];
      this.twirl = 1;
      this.angle = 25;
      this.partLen = 0.1;
    }

    LSystemRenderer.prototype.draw = function(canvas, paint) {
      var a, angle, cx, cy, i, length, level, lineWidth, partLen, partLenBase, partLenRatio, px, py, state, symbol, th, _i, _j, _ref, _ref1, _results;

      paint.setColor(255, 255, 150, 255);
      paint.setStroke();
      paint.setFlags(paint.kAntiAliasFlag);
      a = -90;
      partLenRatio = this.partLen;
      th = 0;
      partLenBase = 50;
      length = 1;
      for (i = _i = 0, _ref = this.instance.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.instance[i] !== 'F') {
          break;
        } else {
          length++;
        }
      }
      partLenBase /= length;
      angle /= length;
      partLen = partLenBase * min(1.0, (partLenRatio - th) / 0.2);
      px = cx = canvas.width / 2;
      py = cy = canvas.height * 0.8;
      angle = this.angle;
      level = 1;
      _results = [];
      for (i = _j = 0, _ref1 = this.instance.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        paint.setStrokeWidth(5 / level);
        paint.setColor(255 / level, 255 / level, 150 / level, 255);
        symbol = this.instance[i];
        switch (symbol[0]) {
          case 'F':
            a += this.twirl;
            cx = cx + partLen * cos(a * PI / 180);
            cy = cy + partLen * sin(a * PI / 180);
            canvas.drawLine(paint, px, py, cx, cy);
            px = cx;
            _results.push(py = cy);
            break;
          case 'I':
            a += this.twirl;
            cx = cx + partLen * cos(a * PI / 180);
            cy = cy + partLen * sin(a * PI / 180);
            canvas.drawLine(paint, px, py, cx, cy);
            px = cx;
            _results.push(py = cy);
            break;
          case 'L':
            paint.setColor(255, 255, 150, 50);
            cx = cx + partLen / 2 * cos(a * PI / 180);
            cy = cy + partLen / 2 * sin(a * PI / 180);
            canvas.drawLine(paint, px, py, cx, cy);
            _results.push(paint.setColor(255, 255, 150, 255));
            break;
          case '-':
            _results.push(a -= angle);
            break;
          case '+':
            _results.push(a += angle);
            break;
          case '!':
            _results.push(lineWidth *= 0.98);
            break;
          case '[':
            this.stack.push({
              cx: cx,
              cy: cy,
              a: a,
              lineWidth: lineWidth,
              partLen: partLen,
              th: th,
              level: level
            });
            lineWidth *= 0.8;
            th += 0.1;
            _results.push(level++);
            break;
          case ']':
            state = this.stack.pop();
            cx = state.cx;
            cy = state.cy;
            a = state.a;
            px = cx;
            py = cy;
            level = state.level;
            lineWidth = state.lineWidth;
            _results.push(th = state.th);
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    return LSystemRenderer;

  })();
});

/*
//@ sourceMappingURL=LSystemRenderer.map
*/
