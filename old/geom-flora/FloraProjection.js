// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Algae, Arcball, Cactus, CameraOrbiterTouch, Color, Config, Cube, Diffuse, Flower, Fruit, Geometry, Grass, Herb, MathUtils, Mesh, ObjWriter, Octahedron, PI, PerspectiveCamera, Platform, ProjectionClient, Quat, Rect, RenderTarget, Scene, ScreenImage, ShowDepth, ShowNormals, Simulation, SolidColor, Sphere, Texture2D, Time, Vec3, VideosPanel, Viewport, Window, abs, atan2, cos, floor, hem, max, min, pex, random, sin, sqrt, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Arcball = _ref1.Arcball, Scene = _ref1.Scene;
  _ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth, ShowNormals = _ref2.ShowNormals;
  _ref3 = pex.gl, Mesh = _ref3.Mesh, Texture2D = _ref3.Texture2D, RenderTarget = _ref3.RenderTarget, Viewport = _ref3.Viewport, ScreenImage = _ref3.ScreenImage;
  _ref4 = pex.geom, hem = _ref4.hem, Vec3 = _ref4.Vec3, Geometry = _ref4.Geometry, hem = _ref4.hem, Quat = _ref4.Quat, Rect = _ref4.Rect;
  _ref5 = pex.geom.gen, Cube = _ref5.Cube, Octahedron = _ref5.Octahedron, Sphere = _ref5.Sphere;
  Color = pex.color.Color;
  _ref6 = pex.utils, Time = _ref6.Time, MathUtils = _ref6.MathUtils, ObjWriter = _ref6.ObjWriter;
  cos = Math.cos, sin = Math.sin, PI = Math.PI, sqrt = Math.sqrt, abs = Math.abs, random = Math.random, atan2 = Math.atan2, min = Math.min, max = Math.max, floor = Math.floor;
  _ref7 = require('flora/plants'), Fruit = _ref7.Fruit, Cactus = _ref7.Cactus, Herb = _ref7.Herb, Algae = _ref7.Algae, Grass = _ref7.Grass, Flower = _ref7.Flower;
  Simulation = require('flora/projection/Simulation');
  VideosPanel = require('flora/projection/VideosPanel');
  Config = require('flora/game/Config');
  ProjectionClient = require('flora/projection/ProjectionClient');
  CameraOrbiterTouch = require('utils/CameraOrbiterTouch');
  return Window.create({
    settings: {
      canvas: Platform.isBrowser ? document.getElementById('gameboard') : null,
      width: 1050,
      height: 1050
    },
    init: function() {
      var i, margin, plant, plantViewHeight, plantViewWidth, plantViewY, spacing, _i, _j, _len, _ref8;

      this.projection = true;
      this.scaling = false;
      Time.verbose = true;
      this.simulation = new Simulation(this, this.width, this.width / 2);
      this.simulationViewport = new Viewport(this, new Rect(40, 260, 970, 514));
      this.plantViewports = [];
      this.projectionClient = new ProjectionClient();
      this.projectionClient.init();
      this.projectionClient.onPing = this.onPing.bind(this);
      this.projectionClient.onGenotype = this.onGenotype.bind(this);
      this.videosPanel = new VideosPanel();
      margin = 40;
      plantViewY = 869;
      plantViewWidth = 142;
      plantViewHeight = 142;
      spacing = (this.width - plantViewWidth * 6 - margin * 2) / 5;
      for (i = _i = 0; _i < 6; i = ++_i) {
        this.plantViewports.push(new Viewport(this, new Rect(margin + i * plantViewWidth + i * spacing, plantViewY, plantViewWidth, plantViewHeight)));
      }
      this.rtSize = 512;
      this.plantRTViewport = new Viewport({}, new Rect(0, 0, this.rtSize, this.rtSize));
      this.plantRT = new RenderTarget(this.rtSize, this.rtSize, {
        depth: true
      });
      this.plantScreenImage = new ScreenImage(this.plantRT.getColorAttachement(0), 0, 0, plantViewWidth, plantViewWidth, plantViewWidth, plantViewWidth);
      this.plants = [
        new Fruit({
          projection: true,
          width: plantViewWidth,
          height: plantViewHeight
        }), new Algae({
          projection: true,
          width: plantViewWidth,
          height: plantViewHeight
        }), new Flower({
          projection: true,
          width: plantViewWidth,
          height: plantViewHeight
        }), new Herb({
          projection: true,
          width: plantViewWidth,
          height: plantViewHeight
        }), new Grass({
          projection: true,
          width: plantViewWidth,
          height: plantViewHeight
        }), new Cactus({
          projection: true,
          width: plantViewWidth,
          height: plantViewHeight
        })
      ];
      this.plantCamera = new PerspectiveCamera(60, 1);
      this.plantCameraController = new CameraOrbiterTouch(this, this.plantCamera, 1.8, 30);
      _ref8 = this.plants;
      for (_j = 0, _len = _ref8.length; _j < _len; _j++) {
        plant = _ref8[_j];
        plant.ping = 0;
      }
      if (typeof window !== 'undefined') {
        this.adjustLayout();
        return window.onresize = this.adjustLayout.bind(this);
      }
    },
    onPing: function(plantType) {
      var plant, _i, _len, _ref8, _results;

      console.log('FloraProjection.onPing', plantType);
      _ref8 = this.plants;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        plant = _ref8[_i];
        console.log(plantType, plant.type);
        if (plantType === plant.type) {
          console.log('fire!!');
          _results.push(plant.ping = 1);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    onGenotype: function(plantType, genotype) {
      var gene, geneName, plant, _i, _len, _ref8, _results;

      _ref8 = this.plants;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        plant = _ref8[_i];
        if (plantType === plant.type) {
          _results.push((function() {
            var _ref9, _results1;

            _ref9 = plant.genes;
            _results1 = [];
            for (geneName in _ref9) {
              gene = _ref9[geneName];
              _results1.push(gene.normalizedValue = genotype[geneName]);
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    adjustLayout: function() {
      var containerWrapper, height, scale, width;

      scale = 1;
      if (this.scaling) {
        scale = min(window.innerWidth / Config.projection.width, window.innerHeight / Config.projection.height);
        containerWrapper.style.transform = "scale(" + scale + ", " + scale + ")";
        containerWrapper.style.webkitTransform = "scale(" + scale + ", " + scale + ")";
      }
      console.log('scale', scale);
      width = scale * Config.projection.width;
      height = scale * Config.projection.height;
      containerWrapper = document.getElementById('containerWrapper');
      document.body.style.height = height + 'px';
      document.body.style.overflow = 'hidden';
      return this.canvas.style.background = 'transparent';
    },
    draw: function() {
      var i, plant, _i, _len, _ref8, _results;

      this.plantCameraController.update();
      this.gl.clearColor(0, 0, 0, 0);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.simulationViewport.bind();
      this.gl.clearColor(0, 0, 0, 1);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.simulation.draw();
      this.simulationViewport.unbind();
      _ref8 = this.plants;
      _results = [];
      for (i = _i = 0, _len = _ref8.length; _i < _len; i = ++_i) {
        plant = _ref8[i];
        this.plantRTViewport.bind();
        this.plantRT.bind();
        plant.ping *= 0.9;
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        this.gl.clearColor(plant.ping, plant.ping * 0.8, plant.ping * 0.5, 1);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT);
        plant.draw(this.plantCamera);
        this.plantRT.unbind();
        this.plantRTViewport.unbind();
        this.plantRT.getColorAttachement(0).bind();
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_LINEAR);
        this.gl.generateMipmap(this.gl.TEXTURE_2D);
        this.plantViewports[i].bind();
        this.plantScreenImage.draw();
        _results.push(this.plantViewports[i].unbind());
      }
      return _results;
    }
  });
});

/*
//@ sourceMappingURL=FloraProjection.map
*/
