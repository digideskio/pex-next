// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Config, Cube, Diffuse, Instance, Mesh, PlantsLayer, SolidColor, min, _ref;

  Instance = require('flora/plants/Instance');
  Mesh = require('pex/gl').Mesh;
  Cube = require('pex/geom/gen').Cube;
  _ref = require('pex/materials'), SolidColor = _ref.SolidColor, Diffuse = _ref.Diffuse;
  Config = require('flora/game/Config');
  min = Math.min;
  return PlantsLayer = (function() {
    function PlantsLayer(nx, ny, landTiles) {
      var inst, landTile, _i, _len, _ref1;

      this.nx = nx;
      this.ny = ny;
      this.landTiles = landTiles;
      this.instances = [];
      this.size = min(1 / nx, 1 / ny) * 0.5;
      _ref1 = this.landTiles;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        landTile = _ref1[_i];
        inst = new Instance();
        inst.position.setVec3(landTile.position);
        inst.targetPosition.setVec3(landTile.position);
        inst.scale.set(this.size, this.size, this.size);
        inst.targetScale.set(this.size, this.size, this.size);
        this.instances.push(inst);
      }
      this.plantMesh = new Mesh(new Cube(), new Diffuse());
    }

    PlantsLayer.prototype.draw = function(camera) {
      var instance, instanceIndex, _i, _len, _ref1;

      _ref1 = this.instances;
      for (instanceIndex = _i = 0, _len = _ref1.length; _i < _len; instanceIndex = ++_i) {
        instance = _ref1[instanceIndex];
        instance.position.setVec3(this.landTiles[instanceIndex].targetPosition);
        instance.position.y += this.size;
      }
      return this.plantMesh.drawInstances(camera, this.instances);
    };

    return PlantsLayer;

  })();
});

/*
//@ sourceMappingURL=PlantsLayer.map
*/
