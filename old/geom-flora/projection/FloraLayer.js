// Generated by CoffeeScript 1.6.2
define(function(require) {
  var APPEAR_TIME, Color, Config, Cube, DISAPPEAR_DELAY_TIME, DISAPPEAR_TIME, Diffuse, FloraLayer, Instance, Mesh, PlantType, SolidColor, Time, Timeline, anim, floor, hem, min, random, randomChance, randomElement, randomFloat, randomInt, seed, _ref, _ref1, _ref2;

  Instance = require('flora/plants/Instance');
  Mesh = require('pex/gl').Mesh;
  hem = require('pex/geom').hem;
  Cube = require('pex/geom/gen').Cube;
  _ref = require('pex/materials'), SolidColor = _ref.SolidColor, Diffuse = _ref.Diffuse;
  Config = require('flora/game/Config');
  min = Math.min, floor = Math.floor, random = Math.random;
  _ref1 = require('pex/utils/MathUtils'), randomElement = _ref1.randomElement, randomChance = _ref1.randomChance, randomInt = _ref1.randomInt, randomFloat = _ref1.randomFloat, seed = _ref1.seed;
  _ref2 = require('lib/timeline'), Timeline = _ref2.Timeline, anim = _ref2.anim;
  Time = require('pex/utils').Time;
  Color = require('pex/color').Color;
  PlantType = require('flora/game/PlantType');
  APPEAR_TIME = 1;
  DISAPPEAR_DELAY_TIME = 1;
  DISAPPEAR_TIME = 2;
  return FloraLayer = (function() {
    function FloraLayer(nx, ny, landTiles, sim) {
      var inst, landTile, plantGeom, _i, _len, _ref3;

      this.nx = nx;
      this.ny = ny;
      this.landTiles = landTiles;
      this.sim = sim;
      this.instances = [];
      this.size = min(1 / nx, 1 / ny) * 0.5;
      this.simulating = false;
      _ref3 = this.landTiles;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        landTile = _ref3[_i];
        inst = new Instance();
        inst.position.setVec3(landTile.position);
        inst.targetPosition.setVec3(landTile.position);
        inst.scale.set(0, 0, 0);
        inst.targetScale.set(this.size, this.size, this.size);
        inst.plantType = null;
        inst.generation = 0;
        inst.uniforms = {
          diffuseColor: Color.Black
        };
        this.instances.push(inst);
      }
      plantGeom = new Cube();
      plantGeom = hem().fromGeometry(plantGeom);
      plantGeom.faces[4].getAllVertices().forEach(function(v) {
        v.position.x *= 0.5;
        v.position.y = 1.5;
        return v.position.z *= 0.5;
      });
      plantGeom = plantGeom.toFlatGeometry();
      this.plantMesh = new Mesh(plantGeom, new Diffuse());
    }

    FloraLayer.prototype.startSimulation = function() {
      var inst, instIndex, landTile, landType, _i, _len, _ref3;

      if (this.simulating) {
        return;
      }
      this.simulating = true;
      console.log('FloraLayer.startSimulation', this.sim.landscape.wireframe);
      _ref3 = this.instances;
      for (instIndex = _i = 0, _len = _ref3.length; _i < _len; instIndex = ++_i) {
        inst = _ref3[instIndex];
        landTile = this.landTiles[instIndex];
        landType = landTile.landType;
        inst.plantType = null;
        inst.generation = 0;
      }
      this.randomSpread();
      setTimeout(this.randomSpread.bind(this), 3000);
      return setTimeout(this.randomSpread.bind(this), 10000);
    };

    FloraLayer.prototype.randomSpread = function() {
      var chance, i, numX, numY, plantType, tile, x, y, _i, _len, _ref3, _results;

      numX = Config.simulation.numTilesX;
      numY = Config.simulation.numTilesY;
      seed(Date.now());
      _ref3 = Config.plantTypes;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        plantType = _ref3[_i];
        _results.push((function() {
          var _j, _results1;

          _results1 = [];
          for (i = _j = 0; _j < 10; i = ++_j) {
            x = randomInt(3, numX - 3);
            y = randomInt(3, numY - 3);
            tile = this.landTiles[x + y * numX];
            chance = Config.simulation.fittnes[plantType][tile.landType];
            if (chance > 0) {
              this.putPlant(x, y, plantType, 1);
              break;
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    FloraLayer.prototype.findWinner = function() {
      return Config.plantTypes[floor(random() * 6)];
    };

    FloraLayer.prototype.stopSimulation = function() {
      var inst, winner, _i, _len, _ref3, _results;

      if (!this.simulating) {
        return;
      }
      this.simulating = false;
      winner = this.findWinner();
      Timeline.getGlobalInstance().clear();
      _ref3 = this.instances;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        inst = _ref3[_i];
        if (inst.plantType === winner) {
          anim(inst.scale).to(DISAPPEAR_DELAY_TIME, {
            x: 0,
            y: 0,
            z: 0
          }, DISAPPEAR_TIME);
        } else {
          anim(inst.scale).to(Math.random() * DISAPPEAR_DELAY_TIME / 2, {
            x: 0,
            y: 0,
            z: 0
          }, DISAPPEAR_TIME / 2);
        }
        inst.plantType = null;
        _results.push(inst.generation = 0);
      }
      return _results;
    };

    FloraLayer.prototype.putPlant = function(x, y, plantType, generation) {
      var inst, numX, numY, s;

      numX = Config.simulation.numTilesX;
      numY = Config.simulation.numTilesY;
      inst = this.instances[x + y * numX];
      inst.plantType = plantType;
      inst.uniforms.diffuseColor = Config.colorsByPlantType[plantType];
      inst["new"] = true;
      inst.generation = generation;
      s = this.size * randomFloat(0.2, 1.5) * (1 - generation / 100);
      return anim(inst.scale).to(APPEAR_TIME, {
        x: s,
        y: s,
        z: s
      }, 1);
    };

    FloraLayer.prototype.maybePutPlant = function(x, y, plantType, generation) {
      var chance, inst, landTile, landType, numX, numY;

      numX = Config.simulation.numTilesX;
      numY = Config.simulation.numTilesY;
      inst = this.instances[x + y * numX];
      landTile = this.landTiles[x + y * numX];
      landType = landTile.landType;
      chance = (1.0 + Config.simulation.fittnes[plantType][landType]) / generation;
      if (inst.generation === 0 && inst.plantType === null && randomChance(chance)) {
        return this.putPlant(x, y, plantType, generation);
      }
    };

    FloraLayer.prototype.round = 0;

    FloraLayer.prototype.updateSimulation = function() {
      var inst, numX, numY, x, y, _i, _results;

      numX = Config.simulation.numTilesX;
      numY = Config.simulation.numTilesY;
      _results = [];
      for (y = _i = 0; 0 <= numY ? _i < numY : _i > numY; y = 0 <= numY ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;

          _results1 = [];
          for (x = _j = 0; 0 <= numX ? _j < numX : _j > numX; x = 0 <= numX ? ++_j : --_j) {
            inst = this.instances[x + y * numX];
            if (inst.plantType !== null && !inst["new"]) {
              if (x < numX - 1) {
                this.maybePutPlant(x + 1, y, inst.plantType, inst.generation + 1);
              }
              if (x > 0) {
                this.maybePutPlant(x - 1, y, inst.plantType, inst.generation + 1);
              }
              if (y < numY - 1) {
                this.maybePutPlant(x, y + 1, inst.plantType, inst.generation + 1);
              }
              if (y > 0) {
                _results1.push(this.maybePutPlant(x, y - 1, inst.plantType, inst.generation + 1));
              } else {
                _results1.push(void 0);
              }
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    FloraLayer.prototype.updateBars = function() {
      var count, i, instance, totalNumTiles, typeMap, values, _i, _len, _ref3;

      values = [0.5, 0.2, 0.1, 0.5, 0.4, 0.7];
      count = [0, 0, 0, 0, 0, 0];
      typeMap = ['fruit', 'algae', 'flower', 'herb', 'grass', 'cactus'];
      _ref3 = this.instances;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        instance = _ref3[_i];
        i = typeMap.indexOf(instance.plantType);
        if (i !== -1) {
          count[i]++;
        }
      }
      totalNumTiles = Config.simulation.numTilesX * Config.simulation.numTilesY;
      values = count.map(function(v) {
        return min(1, 3 * v / totalNumTiles);
      });
      return this.applyCss(values);
    };

    FloraLayer.prototype.applyCss = function(values) {
      var bars, i, m, w, _i, _results;

      bars = document.querySelectorAll("#bars li");
      _results = [];
      for (i = _i = 0; _i < 6; i = ++_i) {
        w = floor(values[i] * 100);
        m = 66 + 100 - w;
        bars[i].style.width = w + 'px';
        _results.push(bars[i].style.marginRight = m + 'px');
      }
      return _results;
    };

    FloraLayer.prototype.draw = function(camera) {
      var instance, instanceIndex, _i, _len, _ref3;

      this.updateBars();
      Timeline.getGlobalInstance().update(Time.delta);
      if (Time.frameNumber % 60 === 0) {
        this.updateSimulation();
      }
      _ref3 = this.instances;
      for (instanceIndex = _i = 0, _len = _ref3.length; _i < _len; instanceIndex = ++_i) {
        instance = _ref3[instanceIndex];
        console;
        instance.position.setVec3(this.landTiles[instanceIndex].position);
        instance.position.y += this.size / 2 + this.landTiles[instanceIndex].scale.y / 2;
        if (instance.plantType) {
          instance.uniforms.diffuseColor = Config.colorsByPlantType[instance.plantType].clone();
          instance.uniforms.diffuseColor.r -= instance.position.y * 2;
          instance.uniforms.diffuseColor.g -= instance.position.y * 2;
          instance.uniforms.diffuseColor.b -= instance.position.y * 2;
        }
        instance["new"] = false;
      }
      return this.plantMesh.drawInstances(camera, this.instances);
    };

    return FloraLayer;

  })();
});

/*
//@ sourceMappingURL=FloraLayer.map
*/
