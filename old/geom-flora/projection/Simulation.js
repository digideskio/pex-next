// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Arcball, BellCurve, CameraOrbiter, Color, Config, ConnectionStatus, Context, Cosine, Cube, Cylinder, Diffuse, FEEDBACK, FloraLayer, GAME, GENERATING, GameInfo, GenesPanel, Geometry, HEDuplicate, IsoLines, KnobsPanel, MathUtils, Mesh, Noise, ObjWriter, Octahedron, PI, PerspectiveCamera, Plane, PlantsPanel, Platform, Quat, RESULTS, RESULTS_WINNER, Rect, RenderTarget, SIMULATION_1, SIMULATION_2, SIMULATION_3, Scene, ScreenImage, ShowDepth, ShowNormals, Simulation, SolidColor, Sphere, TextLabel, Texture2D, Time, Vec3, Viewport, Voxels, Window, abs, atan2, cos, fem, hem, modeTextures, pex, random, sin, sqrt, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

  pex = require('pex');
  _ref = pex.sys, Window = _ref.Window, Platform = _ref.Platform;
  _ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Arcball = _ref1.Arcball, Scene = _ref1.Scene;
  _ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth, ShowNormals = _ref2.ShowNormals;
  _ref3 = pex.gl, Mesh = _ref3.Mesh, Texture2D = _ref3.Texture2D, RenderTarget = _ref3.RenderTarget, Viewport = _ref3.Viewport, ScreenImage = _ref3.ScreenImage, Context = _ref3.Context;
  _ref4 = pex.geom, hem = _ref4.hem, Vec3 = _ref4.Vec3, Geometry = _ref4.Geometry, hem = _ref4.hem, Quat = _ref4.Quat, Rect = _ref4.Rect;
  _ref5 = require('flora/game/ui'), GenesPanel = _ref5.GenesPanel, KnobsPanel = _ref5.KnobsPanel, PlantsPanel = _ref5.PlantsPanel, ConnectionStatus = _ref5.ConnectionStatus, TextLabel = _ref5.TextLabel, GameInfo = _ref5.GameInfo;
  _ref6 = pex.geom.gen, Cube = _ref6.Cube, Octahedron = _ref6.Octahedron, Sphere = _ref6.Sphere;
  Color = pex.color.Color;
  _ref7 = pex.utils, Time = _ref7.Time, MathUtils = _ref7.MathUtils, ObjWriter = _ref7.ObjWriter;
  cos = Math.cos, sin = Math.sin, PI = Math.PI, sqrt = Math.sqrt, abs = Math.abs, random = Math.random, atan2 = Math.atan2;
  fem = require('geom/fem');
  Cylinder = require('geom/gen/Cylinder');
  HEDuplicate = require('geom/hem/HEDuplicate');
  Plane = require('flora/land/Plane');
  Voxels = require('flora/land/Voxels');
  IsoLines = require('flora/land/IsoLines');
  BellCurve = require('flora/land/surface/BellCurve');
  Cosine = require('flora/land/surface/Cosine');
  Noise = require('flora/land/surface/Noise');
  CameraOrbiter = require('utils/CameraOrbiter');
  Config = require('flora/game/Config');
  FloraLayer = require('flora/projection/FloraLayer');
  GENERATING = 'generating';
  GAME = 'game';
  SIMULATION_1 = 'simulation_round1';
  SIMULATION_2 = 'simulation_round2';
  SIMULATION_3 = 'simulation_round3';
  RESULTS = 'results';
  RESULTS_WINNER = 'results_winner';
  FEEDBACK = 'feedback';
  modeTextures = {};
  modeTextures[GENERATING] = 'assets/projection/msg_generating.png';
  modeTextures[GAME] = 'assets/projection/msg_waiting.png';
  modeTextures[SIMULATION_1] = 'assets/projection/msg_round1.png';
  modeTextures[SIMULATION_2] = 'assets/projection/msg_round2.png';
  modeTextures[SIMULATION_3] = 'assets/projection/msg_round3.png';
  modeTextures[RESULTS] = 'assets/projection/msg_bestplant.png';
  modeTextures[RESULTS_WINNER] = 'assets/projection/msg_winner.png';
  return Simulation = (function() {
    function Simulation(app, width, height) {
      this.app = app;
      this.width = width;
      this.height = height;
      this.gl = Context.currentContext.gl;
      this.initGeometry();
      this.initCameras();
      this.initTexts();
    }

    Simulation.prototype.initGeometry = function() {
      this.surface = new Noise(4, 0.5);
      this.landscape = new Voxels(Config.simulation.numTilesX, Config.simulation.numTilesY);
      this.landscape.update(this.surface);
      return this.floraLayer = new FloraLayer(Config.simulation.numTilesX, Config.simulation.numTilesY, this.landscape.instances, this);
    };

    Simulation.prototype.initCameras = function() {
      this.camera = new PerspectiveCamera(60, this.width / this.height);
      this.orbiter = new CameraOrbiter(this.camera, 0.6, 35);
      this.rtWidth = 2048;
      this.rtHeight = 1024;
      this.simRTViewport = new Viewport({}, new Rect(0, 0, this.rtWidth, this.rtHeight));
      this.simRT = new RenderTarget(this.rtWidth, this.rtHeight, {
        depth: true
      });
      this.simScreenImage = new ScreenImage(this.simRT.getColorAttachement(0), 0, 0, this.rtWidth, this.rtHeight, this.rtWidth, this.rtHeight);
      return this.timeLabel = new TextLabel(this, new Vec3(500, 500, 0), "00:30", 500, 0.6);
    };

    Simulation.prototype.initTexts = function() {
      var modeName, textureFile;

      for (modeName in modeTextures) {
        textureFile = modeTextures[modeName];
        modeTextures[modeName] = new ScreenImage(Texture2D.load(textureFile), 0, 0, this.width, this.height, this.width, this.height);
      }
      return this.fadeToBlack = new ScreenImage(Texture2D.load('assets/img/black.png'), 0, 0, this.width, this.height, this.width, this.height);
    };

    Simulation.prototype.draw = function() {
      var modeName;

      if (Config.simulation.landscapeRotation) {
        this.orbiter.phi += Time.delta * 10;
      } else {
        this.orbiter.phi = 90;
      }
      this.orbiter.update();
      modeName = this.app.projectionClient.mode;
      this.gl.enable(this.gl.CULL_FACE);
      this.gl.enable(this.gl.DEPTH_TEST);
      this.gl.lineWidth(2);
      if (modeName === GENERATING) {
        this.landscape.setWireframe(true);
      } else {
        this.landscape.setWireframe(false);
      }
      if (modeName === FEEDBACK) {
        this.landscape.setHeight(0);
        this.app.videosPanel.showFeedback(true);
      } else {
        this.landscape.setHeight(1);
        this.app.videosPanel.showFeedback(false);
      }
      if (modeName === SIMULATION_1 || modeName === SIMULATION_2 || modeName === SIMULATION_3) {
        if (!this.floraLayer.simulating) {
          this.floraLayer.startSimulation();
        }
      } else {
        if (this.floraLayer.simulating) {
          this.floraLayer.stopSimulation();
        }
      }
      this.landscape.update(this.surface, Time.delta);
      this.simRTViewport.bind();
      this.simRT.bind();
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.landscape.draw(this.camera);
      this.floraLayer.draw(this.camera);
      this.simRT.unbind();
      this.simRTViewport.unbind();
      this.simRT.getColorAttachement(0).bind();
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_LINEAR);
      this.gl.generateMipmap(this.gl.TEXTURE_2D);
      this.simScreenImage.draw();
      this.gl.disable(this.gl.DEPTH_TEST);
      this.gl.enable(this.gl.BLEND);
      this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
      this.timeLabel.draw();
      return this.gl.disable(this.gl.BLEND);
    };

    return Simulation;

  })();
});

/*
//@ sourceMappingURL=Simulation.map
*/
