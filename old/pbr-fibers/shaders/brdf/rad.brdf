analytic

::begin parameters
float Roughness 0.001 1.0 .1
float SpecIntensity 0 1 .1
float Diffuse 0 1 0.5
float Anisotropy 0 1 0
bool UseAnisotropy 1
bool ShowDistributionTerm 0
::end parameters

::begin shader

// Clamps to [0, 1]
float saturate(float x)
{
    return clamp(x, 0, 1);
}

// Calculates the fresnel term using Schlick's approximation
float Fresnel(float f0, vec3 h, vec3 l)
{
    return f0 + (1.0f - f0) * pow((1.0f - saturate(dot(l, h))), 5.0f);
}

// -- helper for computing the GGX visibility term
float GGX_V1(in float m2, in float nDotX)
{
    return 1.0f / (nDotX + sqrt(m2 + (1 - m2) * nDotX * nDotX));
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    if(dot(N, L) <= 0.0f)
        return vec3(0.0f);

    vec3 n = N;
    vec3 l = L;
    vec3 v = V;
    vec3 h = normalize(L + V);

    float nDotH = saturate(dot(n, h));
    float nDotL = saturate(dot(n, l));
    float nDotV = saturate(dot(n, v));
    float nDotH2 = nDotH * nDotH;

    float m = Roughness;
    float m2 = m * m;

    // Calculate the distribution term
    float d = m2 / (3.14159f * pow(nDotH * nDotH * (m2 - 1) + 1, 2.0f));

    if(UseAnisotropy)
    {
        float hDotX = dot(h, X);
        float hDotY = dot(h, Y);
        float hDotX2 = hDotX * hDotX;
        float hDotY2 = hDotY * hDotY;

        float mx = m;
        float my = mix(0, mx, 1.0f - Anisotropy);
        float mx2 = mx * mx;
        float my2 = my * my;

        float dDenom = hDotX2 / mx2 + hDotY2 / my2 + nDotH2;
        d = (1.0f / 3.14159f) * (1.0f / (mx * my)) * (1.0f / (dDenom * dDenom));
    }

    // Calculate the matching visibility term
    float v1i = GGX_V1(m2, nDotL);
    float v1o = GGX_V1(m2, nDotV);
    float vis = v1i * v1o;

    // Calculate the Fresnel term
    float f = Fresnel(SpecIntensity, h, l);

    // Put it all together
    float specular = d * vis * f;

    //vec3 diffuse = Diffuse * vec3(1.0f, 0, 0);
    vec3 diffuse = vec3(Diffuse);// * vec3(1.0f, 0, 0);
    diffuse *= (1.0f - f);

    vec3 color = vec3(specular) + diffuse * (1.0f / 3.14159f);

    if(ShowDistributionTerm)
        color = vec3(d);

    return color;
}

::end shader
