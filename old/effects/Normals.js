// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Context, Geometry, MathUtils, Mesh, Normals, NormalsMaterial, TextureCube, Vec2, _ref, _ref1;

  Context = require('pex/gl').Context;
  _ref = require('pex/geom'), Geometry = _ref.Geometry, Vec2 = _ref.Vec2;
  _ref1 = require('pex/gl'), Mesh = _ref1.Mesh, TextureCube = _ref1.TextureCube;
  MathUtils = require('pex/utils').MathUtils;
  NormalsMaterial = require('effects/NormalsMaterial');
  return Normals = (function() {
    Normals.prototype.amount = 1;

    function Normals(app, source, boundingBox, rgbdTexture) {
      var geom, gl, h, i, material, s, t, w, _i, _ref2;

      this.app = app;
      this.source = source;
      this.boundingBox = boundingBox;
      this.rgbdTexture = rgbdTexture;
      gl = this.gl = Context.currentContext.gl;
      geom = new Geometry({
        vertices: true,
        texCoords: true,
        faces: false
      });
      w = this.source.textureSize.x;
      h = this.source.textureSize.y;
      for (i = _i = 0, _ref2 = w * h / 2 - 1; _i <= _ref2; i = _i += 1) {
        s = (i % w) / w + Math.random() * 0.1;
        t = Math.floor(i / w) / h + Math.random() * 0.1;
        if (t < 0.13 - 0.05) {
          continue;
        }
        if (t > 0.33 + 0.05) {
          continue;
        }
        t *= 2;
        geom.vertices.push(MathUtils.randomVec3().scale(3000));
        geom.texCoords.push(new Vec2(s, t));
      }
      material = new NormalsMaterial({
        pointSize: 3,
        rgbd: this.rgbdTexture,
        bboxMin: this.source.boundingBox.min,
        bboxMax: this.source.boundingBox.max,
        amount: this.amount
      });
      this.mesh = new Mesh(geom, material, {
        primitiveType: gl.POINTS
      });
    }

    Normals.prototype.draw = function(camera) {
      this.gl.enable(this.gl.DEPTH_TEST);
      this.mesh.material.uniforms.amount = this.amount;
      return this.mesh.draw(camera);
    };

    return Normals;

  })();
});
