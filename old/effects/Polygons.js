// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Context, Geometry, MathUtils, Mesh, Polygons, PolygonsMaterial, TextureCube, Vec2, Vec3, Vec4, _ref, _ref1;

  Context = require('pex/gl').Context;
  _ref = require('pex/geom'), Geometry = _ref.Geometry, Vec2 = _ref.Vec2, Vec3 = _ref.Vec3, Vec4 = _ref.Vec4;
  _ref1 = require('pex/gl'), Mesh = _ref1.Mesh, TextureCube = _ref1.TextureCube;
  MathUtils = require('pex/utils').MathUtils;
  PolygonsMaterial = require('effects/PolygonsMaterial');
  return Polygons = (function() {
    Polygons.prototype.maxTriangleSize = 150;

    Polygons.prototype.amount = 1;

    Polygons.prototype.cutout = 1;

    function Polygons(app, source, boundingBox, rgbdTexture) {
      var a, b, geom, gl, h, i, i1, i2, j, list, material, s, s1, s2, t, t1, t2, w, _i, _j, _k, _ref2, _ref3, _ref4, _ref5, _results;

      this.app = app;
      this.source = source;
      this.boundingBox = boundingBox;
      this.rgbdTexture = rgbdTexture;
      gl = this.gl = Context.currentContext.gl;
      geom = new Geometry({
        vertices: true,
        normals: true,
        texCoords: true,
        faces: false
      });
      w = this.source.textureSize.x;
      h = this.source.textureSize.y;
      list = (function() {
        _results = [];
        for (var _i = 0, _ref2 = w * h / 2 - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; 0 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      for (i = _j = 0, _ref3 = w * h / 2 - 1; 0 <= _ref3 ? _j <= _ref3 : _j >= _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
        a = i;
        b = i + Math.floor(Math.random() * 10);
        _ref4 = [list[b], list[a]], list[a] = _ref4[0], list[b] = _ref4[1];
      }
      for (j = _k = 0, _ref5 = w * h / 2 - 1; _k <= _ref5; j = _k += 2) {
        i = list[j];
        if (j % 6 === 0) {
          i1 = list[j + 2];
          i2 = list[j + 4];
        } else if (j % 6 === 2) {
          i1 = list[j - 2];
          i2 = list[j + 2];
        } else {
          i1 = list[j - 2];
          i2 = list[j - 4];
        }
        s = (i % w) / w;
        t = Math.floor(i / w) / h;
        s1 = (i1 % w) / w;
        t1 = Math.floor(i1 / w) / h;
        s2 = (i2 % w) / w;
        t2 = Math.floor(i2 / w) / h;
        geom.vertices.push(MathUtils.randomVec3().scale(3000));
        geom.texCoords.push(new Vec2(s, t));
        geom.normals.push(new Vec4(s1, t1, s2, t2));
      }
      material = new PolygonsMaterial({
        pointSize: 1,
        rgbd: this.rgbdTexture,
        bboxMin: this.source.boundingBox.min,
        bboxMax: this.source.boundingBox.max
      });
      this.mesh = new Mesh(geom, material, {
        primitiveType: gl.TRIANGLES
      });
    }

    Polygons.prototype.draw = function(camera) {
      this.gl.enable(this.gl.POLYGON_OFFSET_FILL);
      this.gl.polygonOffset(0.75, -50);
      this.mesh.material.uniforms.maxTriangleSize = this.maxTriangleSize * this.amount;
      this.mesh.material.uniforms.cutout = this.cutout;
      this.gl.enable(this.gl.DEPTH_TEST);
      this.mesh.draw(camera);
      return this.gl.disable(this.gl.POLYGON_OFFSET_FILL);
    };

    return Polygons;

  })();
});
