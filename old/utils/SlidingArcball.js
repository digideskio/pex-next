// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var CameraOrbiter, MathUtils, Platform, SlidingArcball;

  CameraOrbiter = require('utils/CameraOrbiter');
  MathUtils = require('pex/utils').MathUtils;
  Platform = require('pex/sys').Platform;
  return SlidingArcball = (function(_super) {
    __extends(SlidingArcball, _super);

    SlidingArcball.prototype.allowZooming = true;

    SlidingArcball.prototype.enabled = true;

    SlidingArcball.prototype.velocityX = 0;

    SlidingArcball.prototype.release = false;

    SlidingArcball.prototype.maxSpeed = 20;

    SlidingArcball.prototype.friction = 0.05;

    SlidingArcball.prototype.targetLookoutTheta = 0;

    SlidingArcball.prototype.lookoutTheta = 0;

    SlidingArcball.prototype.rotationPhi = 0;

    SlidingArcball.prototype.targetLookoutPhi = 0;

    SlidingArcball.prototype.lookoutPhi = 0;

    SlidingArcball.prototype.lookoutStrength = 0.2;

    SlidingArcball.prototype.targetMinY = -350;

    SlidingArcball.prototype.targetMaxY = 200;

    function SlidingArcball(window, camera, distance) {
      this.window = window;
      SlidingArcball.__super__.constructor.call(this, camera, distance);
      this.distance = distance || 2;
      this.minDistance = distance / 2 || 0.3;
      this.maxDistance = distance * 2 || 5;
      this.addEventHanlders();
    }

    SlidingArcball.prototype.addEventHanlders = function() {
      var _this = this;

      this.window.on('leftMouseDown', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        _this.velocityX = 0;
        return _this.release = false;
      });
      this.window.on('leftMouseUp', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        return _this.release = true;
      });
      if (Platform.isBrowser) {
        window.addEventListener('mouseup', function() {
          return _this.release = true;
        });
      }
      this.window.on('mouseMoved', function(e) {
        var h2, verticalLookout, w2;

        if (e.handled || !_this.enabled) {
          return;
        }
        h2 = _this.window.height / 2;
        w2 = _this.window.width / 2;
        verticalLookout = _this.release ? 30 : 180;
        _this.targetLookoutPhi = -(e.x - w2) / w2 * 20 * _this.lookoutStrength;
        return _this.targetLookoutTheta = (e.y - h2) / h2 * verticalLookout * _this.lookoutStrength;
      });
      this.window.on('mouseDragged', function(e) {
        var h2;

        if (e.handled || !_this.enabled || _this.release) {
          return;
        }
        h2 = _this.window.height / 2;
        _this.velocityX = (_this.velocityX + e.dx / 2) / 2;
        if (_this.velocityX > _this.maxSpeed) {
          _this.velocityX = _this.maxSpeed;
        }
        if (_this.velocityX < -_this.maxSpeed) {
          _this.velocityX = -_this.maxSpeed;
        }
        return _this.rotationPhi -= _this.velocityX;
      });
      return this.window.on('scrollWheel', function(e) {
        if (e.handled || !_this.enabled) {
          return;
        }
        if (!_this.allowZooming) {
          return;
        }
        _this.distance = Math.min(_this.maxDistance, Math.max(_this.distance + e.dy / 100 * (_this.maxDistance - _this.minDistance), _this.minDistance));
        _this.update();
        return false;
      });
    };

    SlidingArcball.prototype.setTarget = function(target) {
      this.target = target;
      return this.update();
    };

    SlidingArcball.prototype.update = function() {
      this.camera.setTarget(this.target);
      if (this.release) {
        this.velocityX *= 1 - this.friction;
        this.rotationPhi -= this.velocityX;
      }
      this.lookoutPhi += (this.targetLookoutPhi - this.lookoutPhi) * 0.1;
      this.lookoutTheta += (this.targetLookoutTheta - this.lookoutTheta) * 0.1;
      this.camera.target.y = MathUtils.map(this.distance, this.maxDistance, this.minDistance, this.targetMinY, this.targetMaxY);
      this.phi = (this.rotationPhi + this.lookoutPhi) % 720;
      this.theta = this.lookoutTheta;
      return SlidingArcball.__super__.update.call(this);
    };

    return SlidingArcball;

  })(CameraOrbiter);
});
