// Generated by CoffeeScript 1.6.2
define(function(require) {
  var BoundingBox, Color, Context, GPUParticlePositionUpdateGLSL, GPUParticleRender, GPUParticleVelocityUpdateGLSL, Geometry, MathUtils, Mesh, Platform, Program, RenderTarget, ScreenImage, Texture2D, Time, Vec2, Vec3, Waterfall, cos, floor, random, sin, _ref, _ref1, _ref2;

  GPUParticlePositionUpdateGLSL = require('lib/text!effects/GPUParticlePositionUpdate.glsl');
  GPUParticleVelocityUpdateGLSL = require('lib/text!effects/GPUParticleVelocityUpdate.glsl');
  GPUParticleRender = require('effects/GPUParticleRender');
  RenderTarget = require('effects/RenderTarget');
  _ref = require('pex/gl'), Texture2D = _ref.Texture2D, ScreenImage = _ref.ScreenImage, Context = _ref.Context, Mesh = _ref.Mesh, Program = _ref.Program;
  _ref1 = require('pex/geom'), Vec2 = _ref1.Vec2, Vec3 = _ref1.Vec3, Geometry = _ref1.Geometry, BoundingBox = _ref1.BoundingBox;
  Platform = require('pex/sys').Platform;
  _ref2 = require('pex/utils'), MathUtils = _ref2.MathUtils, Time = _ref2.Time;
  Color = require('pex/color').Color;
  floor = Math.floor, random = Math.random, sin = Math.sin, cos = Math.cos;
  return Waterfall = (function() {
    Waterfall.prototype.particleSpeed = 300;

    Waterfall.prototype.gravitySpeed = -981;

    Waterfall.prototype.debugMode = false;

    Waterfall.prototype.pointSize = 2;

    Waterfall.prototype.amount = 1;

    function Waterfall(app, source, boundingBox, rgbdTexture) {
      var data, floatTexExt, gl, h, i, internalFormat, particleGeometry, point, positionData, texCoords, velocityData, vertices, w, _i, _j, _k, _l, _ref3, _ref4, _ref5, _ref6;

      this.app = app;
      this.source = source;
      this.boundingBox = boundingBox;
      this.rgbdTexture = rgbdTexture;
      gl = this.gl = Context.currentContext.gl;
      w = 256;
      h = 256;
      this.particlePositions = Texture2D.create(w, h, {
        bpp: 32
      });
      this.particlePositions2 = Texture2D.create(w, h, {
        bpp: 32
      });
      this.particleVelocities = Texture2D.create(w, h, {
        bpp: 32
      });
      this.particleVelocities2 = Texture2D.create(w, h, {
        bpp: 32
      });
      data = new Float32Array(w * h * 4);
      for (i = _i = 0, _ref3 = w * h * 4 - 1; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
        data[i] = 0;
      }
      internalFormat = Platform.isPlask ? 0x8814 : this.gl.RGBA;
      if (Platform.isBrowser) {
        floatTexExt = this.gl.getExtension('OES_texture_float');
      }
      this.particlePositions.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particlePositions2.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particleVelocities.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particleVelocities2.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particlePositionsPreview = new ScreenImage(this.particlePositions, this.app.width - w / 2 - 10, 10, w / 2, h / 2, this.app.width, this.app.height);
      this.particleVelocitiesPreview = new ScreenImage(this.particleVelocities, this.app.width - w / 2 - 10, 20 + h / 2, h / 2, h / 2, this.app.width, this.app.height);
      positionData = new Float32Array(w * h * 4);
      for (i = _j = 0, _ref4 = w * h * 4 - 1; _j <= _ref4; i = _j += 4) {
        point = MathUtils.randomVec3InBoundingBox(this.boundingBox);
        positionData[i + 0] = point.x;
        positionData[i + 1] = point.y;
        positionData[i + 2] = point.z;
        positionData[i + 3] = 0;
      }
      this.particlePositions.bind();
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, positionData);
      velocityData = new Float32Array(w * h * 4);
      for (i = _k = 0, _ref5 = w * h * 4 - 1; _k <= _ref5; i = _k += 4) {
        velocityData[i + 0] = this.particleSpeed * (random() - 0.5);
        velocityData[i + 1] = 0;
        velocityData[i + 2] = this.particleSpeed * (random() - 0.5);
        velocityData[i + 3] = 0;
      }
      this.particleVelocities.bind();
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, velocityData);
      particleGeometry = new Geometry({
        vertices: true,
        texCoords: true,
        faces: false
      });
      vertices = particleGeometry.vertices;
      texCoords = particleGeometry.texCoords;
      for (i = _l = 0, _ref6 = w * h - 1; 0 <= _ref6 ? _l <= _ref6 : _l >= _ref6; i = 0 <= _ref6 ? ++_l : --_l) {
        vertices.push(MathUtils.randomVec3().scale(5));
        texCoords.push(new Vec2((i % w) / (w - 1), floor(i / w) / (h - 1)));
      }
      this.gpuParticleRender = new GPUParticleRender({
        color: Color.Red,
        pointSize: this.pointSize,
        lightRadius: 3.5
      });
      this.particleMesh = new Mesh(particleGeometry, this.gpuParticleRender, {
        primitiveType: this.gl.POINTS
      });
      this.gpuParticlePositionUpdateProgram = new Program(GPUParticlePositionUpdateGLSL);
      this.gpuParticleVelocityUpdateProgram = new Program(GPUParticleVelocityUpdateGLSL);
      this.updateRenderTarget = new RenderTarget(w, h);
      this.updateScreenImage = new ScreenImage(this.particlePositions, 0, 0, w, h, w, h);
    }

    Waterfall.prototype.draw = function(camera) {
      var _ref3, _ref4;

      this.gl.viewport(0, 0, this.particlePositions.width, this.particlePositions.height);
      this.gl.disable(this.gl.DEPTH_TEST);
      this.gl.disable(this.gl.CULL_FACE);
      this.gl.disable(this.gl.BLEND);
      this.updateScreenImage.mesh.material.uniforms.particlePositions = this.particlePositions;
      this.updateScreenImage.mesh.material.uniforms.particleVelocities = this.particleVelocities;
      this.updateScreenImage.mesh.material.uniforms.gravity = this.gravitySpeed;
      this.updateScreenImage.mesh.material.uniforms.deltaTime = Time.delta;
      this.updateScreenImage.mesh.material.uniforms.bboxMin = this.boundingBox.min;
      this.updateScreenImage.mesh.material.uniforms.bboxMax = this.boundingBox.max;
      this.updateScreenImage.mesh.material.uniforms.amount = this.amount;
      this.updateScreenImage.mesh.material.uniforms.rgbd = this.rgbdTexture;
      if (!this.updateScreenImage.mesh.material.uniforms.restartPoint) {
        this.updateScreenImage.mesh.material.uniforms.restartPoint = new Vec3();
      }
      this.updateScreenImage.mesh.material.uniforms.restartPoint.x = sin(0.5 * Time.seconds);
      this.updateScreenImage.mesh.material.uniforms.restartPoint.z = cos(1.5 * Time.seconds);
      this.updateRenderTarget.bind(this.particlePositions2);
      this.updateScreenImage.draw(null, this.gpuParticlePositionUpdateProgram);
      this.updateRenderTarget.unbind();
      this.updateRenderTarget.bind(this.particleVelocities2);
      this.updateScreenImage.draw(null, this.gpuParticleVelocityUpdateProgram);
      this.updateRenderTarget.unbind();
      this.gl.viewport(0, 0, this.app.width, this.app.height);
      this.gl.enable(this.gl.DEPTH_TEST);
      this.gl.enable(this.gl.CULL_FACE);
      _ref3 = [this.particlePositions2, this.particlePositions], this.particlePositions = _ref3[0], this.particlePositions2 = _ref3[1];
      _ref4 = [this.particleVelocities2, this.particleVelocities], this.particleVelocities = _ref4[0], this.particleVelocities2 = _ref4[1];
      this.gpuParticleRender.uniforms.lightPos.x = 0.5 * sin(Time.seconds);
      this.gpuParticleRender.uniforms.lightPos.y = 0.15 * cos(Time.seconds);
      this.gpuParticleRender.uniforms.lightPos.z = 0.5 * sin(Time.seconds) * cos(0.5 * Time.seconds);
      this.gpuParticleRender.uniforms.camPos = camera.getPosition();
      this.gpuParticleRender.uniforms.particlePositions = this.particlePositions;
      this.gpuParticleRender.uniforms.particleVelocities = this.particleVelocities;
      this.gpuParticleRender.uniforms.bboxMin = this.boundingBox.min;
      this.gpuParticleRender.uniforms.bboxMax = this.boundingBox.max;
      this.gpuParticleRender.uniforms.rgbd = this.source.texture;
      this.gpuParticleRender.uniforms.debugMode = this.debugMode;
      this.gpuParticleRender.uniforms.pointSize = this.pointSize;
      this.gpuParticleRender.uniforms.opacity = this.amount;
      this.gl.enable(this.gl.BLEND);
      this.gl.disable(this.gl.BLEND);
      this.gl.enable(this.gl.DEPTH_TEST);
      this.particleMesh.draw(camera);
      this.gl.disable(this.gl.BLEND);
      if (this.debugMode) {
        this.particlePositionsPreview.draw();
      }
      if (this.debugMode) {
        return this.particleVelocitiesPreview.draw();
      }
    };

    return Waterfall;

  })();
});
