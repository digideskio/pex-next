// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Context, Geometry, MathUtils, Mesh, NoiseDistort, NoiseDistortMaterial, Texture2D, TextureCube, Time, Vec2, Vec3, _ref, _ref1, _ref2, _ref3;

  _ref = require('pex/gl'), Context = _ref.Context, Texture2D = _ref.Texture2D;
  _ref1 = require('pex/geom'), Geometry = _ref1.Geometry, Vec2 = _ref1.Vec2, Vec3 = _ref1.Vec3;
  _ref2 = require('pex/gl'), Mesh = _ref2.Mesh, TextureCube = _ref2.TextureCube;
  _ref3 = require('pex/utils'), MathUtils = _ref3.MathUtils, Time = _ref3.Time;
  NoiseDistortMaterial = require('effects/NoiseDistortMaterial');
  return NoiseDistort = (function() {
    NoiseDistort.prototype.amount = 1;

    NoiseDistort.prototype.amountMouse = 0;

    function NoiseDistort(app, source, boundingBox, rgbdTexture) {
      var geom, gl, h, i, material, s, t, w, _i, _ref4;

      this.app = app;
      this.source = source;
      this.boundingBox = boundingBox;
      this.rgbdTexture = rgbdTexture;
      gl = this.gl = Context.currentContext.gl;
      geom = new Geometry({
        vertices: true,
        texCoords: true,
        normals: true,
        faces: false
      });
      w = this.source.textureSize.x;
      h = this.source.textureSize.y;
      for (i = _i = 0, _ref4 = w * h / 2 - 1; _i <= _ref4; i = _i += 1) {
        s = (i % w) / w + Math.random() * 0.1;
        t = Math.floor(i / w) / (h / 2) + Math.random() * 0.1;
        geom.vertices.push(MathUtils.randomVec3().scale(3000));
        geom.texCoords.push(new Vec2(s, t));
        geom.normals.push(new Vec3(((s * 100) % 10) / 10, ((s * 100) % 10) / 10, Math.random()));
      }
      material = new NoiseDistortMaterial({
        time: 0,
        pointSize: 3,
        rgbd: this.rgbdTexture,
        particleTexture: Texture2D.load('assets/images/particleGlow.png'),
        bboxMin: this.source.boundingBox.min,
        bboxMax: this.source.boundingBox.max,
        bboxCenter: this.source.boundingBox.getCenter(),
        amount: this.amount,
        amountMouse: this.amountMouse
      });
      this.mesh = new Mesh(geom, material, {
        primitiveType: gl.POINTS
      });
    }

    NoiseDistort.prototype.draw = function(camera) {
      this.gl.enable(this.gl.DEPTH_TEST);
      this.mesh.material.uniforms.amount = this.amount;
      this.mesh.material.uniforms.amountMouse = this.amountMouse;
      this.mesh.material.uniforms.time = Time.seconds;
      return this.mesh.draw(camera);
    };

    return NoiseDistort;

  })();
});
