// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Color, Context, Geometry, LogoFx, MathUtils, Mesh, PerspectiveCamera, Rect, ShowColors, Time, Vec3, Viewport, _ref, _ref1, _ref2;

  _ref = require('pex/gl'), Mesh = _ref.Mesh, Viewport = _ref.Viewport, Context = _ref.Context;
  _ref1 = require('pex/geom'), Geometry = _ref1.Geometry, Vec3 = _ref1.Vec3, Rect = _ref1.Rect;
  ShowColors = require('pex/materials').ShowColors;
  Color = require('pex/color').Color;
  PerspectiveCamera = require('pex/scene').PerspectiveCamera;
  _ref2 = require('pex/utils'), MathUtils = _ref2.MathUtils, Time = _ref2.Time;
  return LogoFx = (function() {
    LogoFx.prototype.amount = 0;

    LogoFx.prototype.targetAmount = 0;

    function LogoFx(window, y, shoeViewportSize, shoeViewportHeight) {
      var color, i, _i, _ref3;

      this.window = window;
      this.shoeViewportSize = shoeViewportSize;
      this.shoeViewportHeight = shoeViewportHeight;
      this.geometry = new Geometry({
        vertices: true,
        colors: true,
        faces: true
      });
      this.gl = Context.currentContext.gl;
      for (i = _i = 0, _ref3 = 5 * 3 - 1; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
        this.geometry.vertices.push(new Vec3(-1 + Math.random(), -1 + Math.random(), 0));
        this.geometry.vertices.push(new Vec3(0 + Math.random(), 2 + Math.random(), 0));
        this.geometry.vertices.push(new Vec3(2 + Math.random(), -2 + Math.random(), 0));
        color = null;
        if (i % 3 === 0) {
          color = Color.Red;
        }
        if (i % 3 === 1) {
          color = Color.Green;
        }
        if (i % 3 === 2) {
          color = Color.Blue;
        }
        this.geometry.colors.push(color);
        this.geometry.colors.push(color);
        this.geometry.colors.push(color);
      }
      this.mesh = new Mesh(this.geometry, new ShowColors());
      this.viewport = new Viewport(this.window, new Rect(20, y + 20, this.shoeViewportSize, y + this.shoeViewportHeight));
      this.camera = new PerspectiveCamera(60, this.viewport.bounds.width / this.viewport.bounds.height, 0.1, 100);
    }

    LogoFx.prototype.draw = function() {
      var center, i, s, _i, _ref3;

      this.amount += (this.targetAmount - this.amount) * 0.3;
      MathUtils.seed(Time.seconds);
      s = this.amount;
      for (i = _i = 0, _ref3 = this.geometry.vertices.length - 1; _i <= _ref3; i = _i += 9) {
        center = new Vec3(MathUtils.randomFloat(-1, 1), MathUtils.randomFloat(-1, 1), MathUtils.randomFloat(-1, 1));
        this.geometry.vertices[i + 0].set(center.x - s + Math.random() * 2 * s, center.y - s + Math.random() * 2 * s, center.z - s + Math.random() * 2 * s);
        this.geometry.vertices[i + 1].set(center.x - s + Math.random() * 2 * s, center.y - s + Math.random() * 2 * s, center.z - s + Math.random() * 2 * s);
        this.geometry.vertices[i + 2].set(center.x - s + Math.random() * 2 * s, center.y - s + Math.random() * 2 * s, center.z - s + Math.random() * 2 * s);
        this.geometry.vertices[i + 3].setVec3(this.geometry.vertices[i + 0]);
        this.geometry.vertices[i + 3].x += Math.random() * 0.2 * s;
        this.geometry.vertices[i + 4].setVec3(this.geometry.vertices[i + 1]);
        this.geometry.vertices[i + 4].y += Math.random() * 0.2 * s;
        this.geometry.vertices[i + 5].setVec3(this.geometry.vertices[i + 2]);
        this.geometry.vertices[i + 5].x -= Math.random() * 0.2 * s;
        this.geometry.vertices[i + 5].y += Math.random() * 0.2 * s;
        this.geometry.vertices[i + 6].setVec3(this.geometry.vertices[i + 0]);
        this.geometry.vertices[i + 6].x -= Math.random() * 0.2 * s;
        this.geometry.vertices[i + 7].setVec3(this.geometry.vertices[i + 1]);
        this.geometry.vertices[i + 7].y -= Math.random() * 0.2 * s;
        this.geometry.vertices[i + 8].setVec3(this.geometry.vertices[i + 2]);
        this.geometry.vertices[i + 8].x += Math.random() * 0.2 * s;
        this.geometry.vertices[i + 8].y -= Math.random() * 0.2 * s;
      }
      this.geometry.vertices.dirty = true;
      this.viewport.bind();
      this.gl.enable(this.gl.BLEND);
      this.gl.disable(this.gl.DEPTH_TEST);
      this.gl.blendFunc(this.gl.ONE, this.gl.ONE);
      this.mesh.draw(this.camera);
      this.viewport.unbind();
      this.gl.disable(this.gl.BLEND);
      return this.gl.enable(this.gl.DEPTH_TEST);
    };

    return LogoFx;

  })();
});
