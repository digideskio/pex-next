// Generated by CoffeeScript 1.6.2
var Arcball, BoundingBox, Color, Cube, Edge, GUI, Geometry, IO, Mat4, MathUtils, Mesh, Octree, PerspectiveCamera, Platform, Rect, ScreenImage, ShowColors, SolidColor, Test, Texture2D, Time, Vec2, Vec3, Vec4, floor, max, min, pex, _ref, _ref1, _ref2, _ref3, _ref4;

pex = pex || require('./lib/pex');

Platform = pex.sys.Platform;

Mesh = pex.gl.Mesh;

_ref = pex.scene, PerspectiveCamera = _ref.PerspectiveCamera, Arcball = _ref.Arcball;

GUI = pex.gui.GUI;

_ref1 = pex.geom, Vec2 = _ref1.Vec2, Vec3 = _ref1.Vec3, Vec4 = _ref1.Vec4, Mat4 = _ref1.Mat4, Rect = _ref1.Rect, Geometry = _ref1.Geometry, Edge = _ref1.Edge, BoundingBox = _ref1.BoundingBox, Octree = _ref1.Octree;

Cube = pex.geom.gen.Cube;

_ref2 = pex.materials, SolidColor = _ref2.SolidColor, Test = _ref2.Test, ShowColors = _ref2.ShowColors;

Color = pex.color.Color;

min = Math.min, max = Math.max, floor = Math.floor;

IO = pex.sys.IO;

_ref3 = pex.gl, Texture2D = _ref3.Texture2D, ScreenImage = _ref3.ScreenImage;

_ref4 = pex.utils, Time = _ref4.Time, MathUtils = _ref4.MathUtils;

pex.require(['AxisHelper', 'BoundingBoxHelper', 'OctreeHelper', 'OctreeTracer', 'OctreeTextureEncoder'], function(AxisHelper, BoundingBoxHelper, OctreeHelper, OctreeTracer, OctreeTextureEncoder) {
  return pex.sys.Window.create({
    init: function() {
      var i, mesh, p, _i, _j, _len, _ref5,
        _this = this;

      this.camera = new PerspectiveCamera(60, this.width / this.height, 0.3, 6);
      this.arcball = new Arcball(this, this.camera, 3);
      this.bounds = new BoundingBox(new Vec3(-1, -1, -1), new Vec3(1, 1, 1));
      this.octree = new Octree(this.bounds.min, this.bounds.getSize());
      MathUtils.seed(34732);
      for (i = _i = 0; _i <= 31; i = ++_i) {
        p = new Vec3(MathUtils.randomFloat(-1, 1), MathUtils.randomFloat(-1, 1), MathUtils.randomFloat(-1, 1));
        p.color = new Color(0.1 + Math.random(), 0.1 + Math.random(), 0.1 + Math.random(), 1.0);
        this.octree.add(p);
      }
      this.octreeTexture = OctreeTextureEncoder.encodeOctreeTexture(this.octree, 64, 64);
      this.octreeTexturePreview = new ScreenImage(this.octreeTexture, 0, 0, this.octreeTexture.width * 4, this.octreeTexture.height * 4, this.width, this.height);
      this.meshes = [];
      this.meshes.push(new AxisHelper(new Vec3(0, 0, 0), 5));
      this.meshes.push(new BoundingBoxHelper(this.bounds));
      this.meshes.push(new OctreeHelper(this.octree, {
        level: 2,
        wireframe: true
      }));
      this.meshes.push(new OctreeHelper(this.octree, {
        level: 2,
        wireframe: false
      }));
      this.meshes.push(new OctreeTracer(this.octree));
      _ref5 = this.meshes;
      for (_j = 0, _len = _ref5.length; _j < _len; _j++) {
        mesh = _ref5[_j];
        mesh.enabled = true;
      }
      this.on('keyDown', function(e) {
        switch (e.str) {
          case 'a':
            return _this.meshes[0].enabled = !_this.meshes[0].enabled;
          case 'b':
            return _this.meshes[1].enabled = !_this.meshes[1].enabled;
          case 'w':
            return _this.meshes[2].enabled = !_this.meshes[2].enabled;
          case 'o':
            return _this.meshes[3].enabled = !_this.meshes[3].enabled;
          case 't':
            return _this.meshes[4].enabled = !_this.meshes[4].enabled;
        }
      });
      this.meshes[0].enabled = true;
      this.meshes[1].enabled = true;
      this.meshes[2].enabled = false;
      this.meshes[3].enabled = false;
      return this.meshes[4].enabled = true;
    },
    draw: function() {
      var mesh, _i, _len, _ref5;

      this.gl.clearColor(0.25, 0.25, 0.25, 1.0);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.gl.enable(this.gl.DEPTH_TEST);
      this.gl.enable(this.gl.CULL_FACE);
      this.gl.cullFace(this.gl.BACK);
      _ref5 = this.meshes;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        mesh = _ref5[_i];
        if (mesh.enabled) {
          mesh.draw(this.camera);
        }
      }
      return this.octreeTexturePreview.draw();
    }
  });
});
