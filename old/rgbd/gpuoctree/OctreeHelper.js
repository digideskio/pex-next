// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Color, Context, Cube, Diffuse, Mesh, OctreeHelper, SolidColor, _ref, _ref1;

  _ref = require('pex/gl'), Mesh = _ref.Mesh, Context = _ref.Context;
  Cube = require('pex/geom/gen').Cube;
  _ref1 = require('pex/materials'), SolidColor = _ref1.SolidColor, Diffuse = _ref1.Diffuse;
  Color = require('pex/color').Color;
  return OctreeHelper = (function(_super) {
    __extends(OctreeHelper, _super);

    function OctreeHelper(octree, options) {
      var cube, level, wireframe;

      level = options.level;
      wireframe = options.wireframe;
      if (level == null) {
        level = 1;
      }
      this.cells = octree.getAllCellsAtLevel(level);
      cube = new Cube();
      if (wireframe) {
        cube.computeEdges();
        options = {
          useEdges: true,
          primitiveType: Context.currentContext.gl.LINES
        };
      } else {
        options = {};
      }
      OctreeHelper.__super__.constructor.call(this, cube, new Diffuse(), options);
    }

    OctreeHelper.prototype.draw = function(camera) {
      var cell, _i, _len, _ref2, _results;

      _ref2 = this.cells;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        cell = _ref2[_i];
        this.position.x = cell.position.x + cell.size.x / 2;
        this.position.y = cell.position.y + cell.size.y / 2;
        this.position.z = cell.position.z + cell.size.z / 2;
        this.scale.x = cell.size.x;
        this.scale.y = cell.size.y;
        this.scale.z = cell.size.z;
        if (cell.points.length > 0 && cell.points[0].color) {
          this.material.uniforms.diffuseColor = cell.points[0].color;
        }
        _results.push(OctreeHelper.__super__.draw.call(this, camera));
      }
      return _results;
    };

    return OctreeHelper;

  })(Mesh);
});
