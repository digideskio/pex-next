// Generated by CoffeeScript 1.6.2
var Arcball, BoundingBox, Color, Cube, Edge, GUI, Geometry, IO, Mat4, MathUtils, Mesh, Octree, PerspectiveCamera, Platform, Program, Rect, ScreenImage, ShowColors, SolidColor, Test, Texture2D, Time, Vec2, Vec3, Vec4, cos, floor, max, min, pex, random, sin, _ref, _ref1, _ref2, _ref3, _ref4;

pex = pex || require('./lib/pex');

Platform = pex.sys.Platform;

Mesh = pex.gl.Mesh;

_ref = pex.scene, PerspectiveCamera = _ref.PerspectiveCamera, Arcball = _ref.Arcball;

GUI = pex.gui.GUI;

_ref1 = pex.geom, Vec2 = _ref1.Vec2, Vec3 = _ref1.Vec3, Vec4 = _ref1.Vec4, Mat4 = _ref1.Mat4, Rect = _ref1.Rect, Geometry = _ref1.Geometry, Edge = _ref1.Edge, BoundingBox = _ref1.BoundingBox, Octree = _ref1.Octree;

Cube = pex.geom.gen.Cube;

_ref2 = pex.materials, SolidColor = _ref2.SolidColor, Test = _ref2.Test, ShowColors = _ref2.ShowColors;

Color = pex.color.Color;

min = Math.min, max = Math.max, floor = Math.floor, sin = Math.sin, cos = Math.cos, random = Math.random;

IO = pex.sys.IO;

_ref3 = pex.gl, Texture2D = _ref3.Texture2D, ScreenImage = _ref3.ScreenImage, Program = _ref3.Program;

_ref4 = pex.utils, Time = _ref4.Time, MathUtils = _ref4.MathUtils;

pex.require(['lib/text!./GPUParticlePositionUpdate.glsl', 'lib/text!./GPUParticleVelocityUpdate.glsl', 'GPUParticleRender', 'RenderTarget'], function(GPUParticlePositionUpdateGLSL, GPUParticleVelocityUpdateGLSL, GPUParticleRender, RenderTarget) {
  return pex.sys.Window.create({
    settings: {
      fullscreen: Platform.isBrowser
    },
    init: function() {
      var data, floatTexExt, gl, h, i, internalFormat, particleGeometry, positionData, texCoords, velocityData, vertices, w, _i, _j, _k, _l, _ref5, _ref6, _ref7, _ref8,
        _this = this;

      this.camera = new PerspectiveCamera(60, this.width / this.height, 0.3, 30);
      this.arcball = new Arcball(this, this.camera, 6);
      this.arcball.target = new Vec3(0, 1, 0);
      this.arcball.updateCamera();
      gl = this.gl;
      Time.verbose = true;
      this.on('keyDown', function(e) {
        switch (e.str) {
          case ' ':
            return console.log();
        }
      });
      w = 256 * 2;
      h = 256 * 2;
      this.particlePositions = Texture2D.create(w, h, {
        bpp: 32
      });
      this.particlePositions2 = Texture2D.create(w, h, {
        bpp: 32
      });
      this.particleVelocities = Texture2D.create(w, h, {
        bpp: 32
      });
      this.particleVelocities2 = Texture2D.create(w, h, {
        bpp: 32
      });
      data = new Float32Array(w * h * 4);
      for (i = _i = 0, _ref5 = w * h * 4 - 1; 0 <= _ref5 ? _i <= _ref5 : _i >= _ref5; i = 0 <= _ref5 ? ++_i : --_i) {
        data[i] = 0;
      }
      internalFormat = Platform.isPlask ? 0x8814 : this.gl.RGBA;
      if (Platform.isBrowser) {
        floatTexExt = this.gl.getExtension('OES_texture_float');
        console.log('OES_texture_float', floatTexExt);
      }
      this.particlePositions.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particlePositions2.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particleVelocities.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particleVelocities2.bind();
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, data);
      this.particlePositionsPreview = new ScreenImage(this.particlePositions, 0, 0, w / 2, h / 2, this.width, this.height);
      this.particleVelocitiesPreview = new ScreenImage(this.particleVelocities, 0, h / 2, h / 2, h / 2, this.width, this.height);
      positionData = new Float32Array(w * h * 4);
      for (i = _j = 0, _ref6 = w * h * 4 - 1; _j <= _ref6; i = _j += 4) {
        positionData[i + 0] = 0.1 * random();
        positionData[i + 1] = 0.8 + random();
        positionData[i + 2] = 0.1 * random();
      }
      this.particlePositions.bind();
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, positionData);
      velocityData = new Float32Array(w * h * 4);
      for (i = _k = 0, _ref7 = w * h * 4 - 1; _k <= _ref7; i = _k += 4) {
        velocityData[i + 0] = 0.05 * (random() - 0.5);
        velocityData[i + 1] = 0;
        velocityData[i + 2] = 0.05 * (random() - 0.5);
      }
      this.particleVelocities.bind();
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, gl.RGBA, gl.FLOAT, velocityData);
      particleGeometry = new Geometry({
        vertices: true,
        texCoords: true,
        faces: false
      });
      vertices = particleGeometry.vertices;
      texCoords = particleGeometry.texCoords;
      for (i = _l = 0, _ref8 = w * h - 1; 0 <= _ref8 ? _l <= _ref8 : _l >= _ref8; i = 0 <= _ref8 ? ++_l : --_l) {
        vertices.push(MathUtils.randomVec3().scale(5));
        texCoords.push(new Vec2((i % w) / (w - 1), floor(i / w) / (h - 1)));
      }
      this.gpuParticleRender = new GPUParticleRender({
        color: Color.Red,
        pointSize: 3,
        lightRadius: 3.5
      });
      this.particleMesh = new Mesh(particleGeometry, this.gpuParticleRender, {
        primitiveType: this.gl.POINTS
      });
      this.gpuParticlePositionUpdateProgram = new Program(GPUParticlePositionUpdateGLSL);
      this.gpuParticleVelocityUpdateProgram = new Program(GPUParticleVelocityUpdateGLSL);
      this.updateRenderTarget = new RenderTarget(w, h);
      return this.updateScreenImage = new ScreenImage(this.particlePositions, 0, 0, w, h, w, h);
    },
    draw: function() {
      var _ref5, _ref6;

      this.gl.clearColor(0.0, 0.0, 0.0, 1.0);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.gl.viewport(0, 0, this.particlePositions.width, this.particlePositions.height);
      this.gl.disable(this.gl.DEPTH_TEST);
      this.gl.disable(this.gl.CULL_FACE);
      this.updateScreenImage.mesh.material.uniforms.particlePositions = this.particlePositions;
      this.updateScreenImage.mesh.material.uniforms.particleVelocities = this.particleVelocities;
      if (!this.updateScreenImage.mesh.material.uniforms.restartPoint) {
        this.updateScreenImage.mesh.material.uniforms.restartPoint = new Vec3();
      }
      this.updateScreenImage.mesh.material.uniforms.restartPoint.x = sin(0.5 * Time.seconds);
      this.updateScreenImage.mesh.material.uniforms.restartPoint.z = cos(1.5 * Time.seconds);
      this.updateRenderTarget.bind(this.particlePositions2);
      this.updateScreenImage.draw(null, this.gpuParticlePositionUpdateProgram);
      this.updateRenderTarget.unbind();
      this.updateRenderTarget.bind(this.particleVelocities2);
      this.updateScreenImage.draw(null, this.gpuParticleVelocityUpdateProgram);
      this.updateRenderTarget.unbind();
      this.gl.viewport(0, 0, this.width, this.height);
      this.gl.enable(this.gl.DEPTH_TEST);
      this.gl.enable(this.gl.CULL_FACE);
      _ref5 = [this.particlePositions2, this.particlePositions], this.particlePositions = _ref5[0], this.particlePositions2 = _ref5[1];
      _ref6 = [this.particleVelocities2, this.particleVelocities], this.particleVelocities = _ref6[0], this.particleVelocities2 = _ref6[1];
      this.gpuParticleRender.uniforms.lightPos.x = 0.5 * sin(Time.seconds);
      this.gpuParticleRender.uniforms.lightPos.y = 0.15 * cos(Time.seconds);
      this.gpuParticleRender.uniforms.lightPos.z = 0.5 * sin(Time.seconds) * cos(0.5 * Time.seconds);
      this.gpuParticleRender.uniforms.camPos = this.camera.getPosition();
      this.gpuParticleRender.uniforms.particlePositions = this.particlePositions;
      this.gpuParticleRender.uniforms.particleVelocities = this.particleVelocities;
      this.particleMesh.draw(this.camera);
      this.particleMesh.rotation.setAxisAngle(new Vec3(0, 1, 0), Time.seconds * 10);
      this.particlePositionsPreview.draw();
      return this.particleVelocitiesPreview.draw();
    }
  });
});
