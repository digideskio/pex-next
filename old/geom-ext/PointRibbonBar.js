// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Face3, Geometry, Mesh, PointRibbonBar, SolidColor, Vec3, _ref;
  _ref = require('pex/geom'), Vec3 = _ref.Vec3, Face3 = _ref.Face3, Geometry = _ref.Geometry;
  Mesh = require('pex/gl').Mesh;
  SolidColor = require('pex/materials').SolidColor;
  return PointRibbonBar = (function(_super) {
    __extends(PointRibbonBar, _super);

    function PointRibbonBar(_arg) {
      this.n = _arg.n, this.material = _arg.material, this.subdiv = _arg.subdiv, this.width = _arg.width, this.exp = _arg.exp, this.baseY = _arg.baseY;
      if (this.n == null) {
        this.n = 1;
      }
      if (this.subdiv == null) {
        this.subdiv = 1;
      }
      if (this.width == null) {
        this.width = 1;
      }
      this.points = [];
      if (this.height == null) {
        this.height = 0.2;
      }
      if (this.material == null) {
        this.material = new SolidColor();
      }
      this.geom = new Geometry({
        vertices: true,
        normals: true,
        faces: true
      });
      PointRibbonBar.__super__.constructor.call(this, this.geom, this.material);
    }

    PointRibbonBar.prototype.draw = function(camera) {
      var faces, i, idx, j, needsFaces, normals, step, subStep, vertices, _i, _j, _k, _l, _m, _ref1, _ref2, _ref3, _ref4, _ref5;
      vertices = this.geom.vertices;
      vertices.dirty = true;
      normals = this.geom.normals;
      normals.dirty = true;
      faces = this.geom.faces;
      needsFaces = faces.length === 0;
      step = 1 / (this.n - 1);
      subStep = this.subdiv > 1 ? 1 / (this.subdiv - 1) : 0;
      idx = 0;
      for (i = _i = 0, _ref1 = this.n - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        j = 0;
        if (i < this.n - 1) {
          for (j = _j = 0, _ref2 = this.subdiv - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; j = 0 <= _ref2 ? ++_j : --_j) {
            vertices[idx] = this.exp(i * this.subdiv + j, i * step + j * subStep * step, vertices[idx]);
            vertices[idx + 1] = this.exp(i * this.subdiv + j, i * step + j * subStep * step, vertices[idx + 1]);
            vertices[idx + 2] = this.exp(i * this.subdiv + j, i * step + j * subStep * step, vertices[idx + 2]);
            vertices[idx + 3] = this.exp(i * this.subdiv + j, i * step + j * subStep * step, vertices[idx + 3]);
            vertices[idx + 1].z -= this.width;
            vertices[idx + 2].y -= this.height;
            vertices[idx + 3].y -= this.height;
            vertices[idx + 3].z -= this.width;
            idx += 4;
          }
        } else {
          vertices[idx] = this.exp(i * this.subdiv, i * step, vertices[idx]);
          vertices[idx + 1] = this.exp(i * this.subdiv, i * step, vertices[idx + 1]);
          vertices[idx + 2] = this.exp(i * this.subdiv, i * step, vertices[idx + 2]);
          vertices[idx + 3] = this.exp(i * this.subdiv, i * step, vertices[idx + 3]);
          vertices[idx + 1].z -= this.width;
          vertices[idx + 2].y -= this.height;
          vertices[idx + 3].y -= this.height;
          vertices[idx + 3].z -= this.width;
          idx += 4;
        }
      }
      if (needsFaces) {
        for (i = _k = 0, _ref3 = vertices.length - 1; 0 <= _ref3 ? _k <= _ref3 : _k >= _ref3; i = 0 <= _ref3 ? ++_k : --_k) {
          normals[i] = new Vec3();
        }
      }
      if (this.ab == null) {
        this.ab = new Vec3();
      }
      if (this.ac == null) {
        this.ac = new Vec3();
      }
      for (i = _l = 0, _ref4 = vertices.length - 7; _l <= _ref4; i = _l += 4) {
        this.ab.asSub(vertices[i], vertices[i + 1]);
        this.ac.asSub(vertices[i], vertices[i + 2]);
        if ((this.ac.length() < 0.01) && vertices[i + 4]) {
          this.ac.asSub(vertices[i], vertices[i + 4]);
        }
        normals[i].asCross(this.ac, this.ab);
      }
      if (needsFaces) {
        for (i = _m = 0, _ref5 = vertices.length - 7; _m <= _ref5; i = _m += 4) {
          faces.push(new Face3(i, i + 4 + 1, i + 1));
          faces.push(new Face3(i, i + 4, i + 4 + 1));
          faces.push(new Face3(i + 2, i + 2 + 4 + 1, i + 2 + 1));
          faces.push(new Face3(i + 2, i + 2 + 4, i + 2 + 4 + 1));
          faces.push(new Face3(i, i + 4, i + 6));
          faces.push(new Face3(i, i + 6, i + 2));
          faces.push(new Face3(i + 1, i + 1 + 4, i + 1 + 6));
          faces.push(new Face3(i + 1, i + 1 + 6, i + 1 + 2));
        }
      }
      return PointRibbonBar.__super__.draw.call(this, camera);
    };

    return PointRibbonBar;

  })(Mesh);
});
