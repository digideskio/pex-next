// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Edge, Geometry, LineBuilder, Mesh, PointLine, SolidColor, Vec3, _ref;
  _ref = require('pex/geom'), Vec3 = _ref.Vec3, Edge = _ref.Edge, Geometry = _ref.Geometry;
  Mesh = require('pex/gl').Mesh;
  LineBuilder = require('pex/geom/gen').LineBuilder;
  SolidColor = require('pex/materials').SolidColor;
  return PointLine = (function(_super) {
    __extends(PointLine, _super);

    function PointLine(_arg) {
      this.n = _arg.n, this.material = _arg.material, this.r = _arg.r, this.exp = _arg.exp;
      if (this.n == null) {
        this.n = 1;
      }
      if (this.r == null) {
        this.r = 0.1;
      }
      this.geom = new Geometry({
        vertices: true,
        edges: true,
        faces: false
      });
      if (this.material == null) {
        this.material = new SolidColor();
      }
      PointLine.__super__.constructor.call(this, this.geom, this.material, {
        useEdges: true
      });
    }

    PointLine.prototype.draw = function(camera) {
      var i, needsEdges, vertices, _i, _j, _ref1, _ref2;
      vertices = this.geom.vertices;
      needsEdges = this.geom.edges.length === 0;
      for (i = _i = 0, _ref1 = this.n - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        vertices[i] = this.exp(i, i / (this.n - 1), vertices[i]);
      }
      if (needsEdges) {
        for (i = _j = 0, _ref2 = vertices.length - 2; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          this.geom.edges.push(new Edge(i, i + 1));
        }
      }
      this.geom.vertices.dirty = true;
      return PointLine.__super__.draw.call(this, camera);
    };

    return PointLine;

  })(Mesh);
});
